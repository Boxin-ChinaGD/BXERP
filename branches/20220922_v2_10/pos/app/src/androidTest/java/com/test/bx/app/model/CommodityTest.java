package com.test.bx.app.model;

import com.bx.erp.bo.BaseHttpBO;
import com.bx.erp.bo.BaseSQLiteBO;
import com.bx.erp.helper.Constants;
import com.bx.erp.model.Commodity;
import com.bx.erp.model.CommodityType;
import com.bx.erp.utils.FieldFormat;
import com.bx.erp.utils.Shared;
import com.test.bx.app.BaseModelTest;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.Random;


public class CommodityTest extends BaseModelTest {

    @BeforeClass
    public void setup() {
        Shared.printTestClassStartInfo();
    }

    @AfterClass
    public void tearDown() {
        Shared.printTestClassEndInfo();
    }

    public Commodity getCommodity() {
        Commodity c = new Commodity();
        c.setID(1l);
        c.setMnemonicCode("xbk");
        c.setTag("123456");
        c.setShortName("饮料");
        c.setnOStart(-1);
        c.setPurchasingPriceStart(-1f);
        c.setName("星巴克");
        c.setStatus(0);
        c.setSpecification("瓶");
        c.setPackageUnitID(1);
        c.setBrandID(1);
        //c.setPricingType(1);
        //c.setCanChangePrice(1);
        c.setCategoryID(1);
        c.setPriceVIP(11.8F);
        c.setPriceRetail(11);
        c.setPriceWholesale(11F);
        c.setNO(100);
        c.setShelfLife(3);
        c.setCanChangePrice(1);
        //c.setRuleOfPoint(1);
        //c.setPurchaseFlag(20);
        c.setReturnDays(30);
        c.setType(CommodityType.EnumCommodityType.ECT_Normal.getIndex());
        c.setOperatorStaffID(1);
        c.setPropertyValue1("123456###@@@");
        c.setPropertyValue2("12345[6###@@@");
        c.setPropertyValue3("12345''6###@@@");
        c.setPropertyValue4("123;;456###@@@");

        return c;
    }

    @Test
    public void test_checkRetrieve1() {
        Shared.printTestMethodStartInfo();

        Commodity c = new Commodity();
        c.setID(1l);
        String err = c.checkRetrieve1(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, "");
        // 测试ID
        c.setID(0l);
        err = c.checkRetrieve1(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        //
        c.setID(null);
        err = c.checkRetrieve1(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
    }

    @Test
    public void test_checkDetele() {
        Shared.printTestMethodStartInfo();

        Commodity c = new Commodity();
        c.setID(1l);
        String err = c.checkDelete(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, "");
        // 测试ID
        c.setID(0l);
        err = c.checkDelete(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        //
        c.setID(null);
        err = c.checkDelete(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
    }

    @Test
    public void test_checkCreate_CASE1() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setType(CommodityType.EnumCommodityType.ECT_Combination.getIndex());
        c.setNO(Commodity.DEFAULT_VALUE_CommodityNO);
        String err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, "");
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName("   ");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" dfgjlkjldfkj");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("dfgjlkjldfkj ");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("dfgsdfgf是电话费&&&&&");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(9999);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_status);
        c.setStatus(0);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10l);
        //("测试批发价");
        c.setPriceWholesale(-1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试商品类型");
        c.setType(BaseSQLiteBO.INVALID_Type);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_typeOfComposition);
        c.setType(CommodityType.EnumCommodityType.ECT_Combination.getIndex());
        //("测试int2---staffID");
        c.setOperatorStaffID(BaseSQLiteBO.INVALID_INT_ID);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateComposition);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);

    }

    @Test
    public void test_checkCreate_CASE2() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setNO(Commodity.DEFAULT_VALUE_CommodityNO);
        c.setType(CommodityType.EnumCommodityType.ECT_MultiPackaging.getIndex());
        c.setRefCommodityID(1);
        c.setRefCommodityMultiple(5);
        String err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, "");
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName("   ");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A.#%%.");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A.#%%. ");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克123&*&*&*");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(9999);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_statusOfMultipackaging);
        c.setStatus(0);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10l);
        //("测试批发价");
        c.setPriceWholesale(-1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        //("测试库存");
        c.setNO(100);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_NOofMultiPackaging);
        c.setNO(Commodity.DEFAULT_VALUE_CommodityNO);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试商品类型");
        c.setType(BaseSQLiteBO.INVALID_Type);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_typeOfMultipackaging);
        c.setType(CommodityType.EnumCommodityType.ECT_MultiPackaging.getIndex());
        // ("多包装商品的参照商品倍数要是大于1,多包装商品的参照商品ID要是正整数");
        c.setRefCommodityMultiple(5);
        c.setRefCommodityID(-5);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodityOfMultiPackaging);
        c.setRefCommodityMultiple(-5);
        c.setRefCommodityID(5);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodityOfMultiPackaging);
        c.setRefCommodityMultiple(5);
        c.setRefCommodityID(5);
        // ("测试int2---staffID");
        c.setOperatorStaffID(BaseSQLiteBO.INVALID_INT_ID);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
        // ("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        // ("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        // ("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
    }

    @Test
    public void test_checkCreate_CASE3() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setType(CommodityType.EnumCommodityType.ECT_Service.getIndex());
        c.setPurchasingUnit("");
        c.setNO(Commodity.DEFAULT_VALUE_CommodityNO);
        c.setnOStart(Commodity.NO_START_Default);
        c.setPurchasingPriceStart(Commodity.PURCHASING_PRICE_START_Default);
        c.setRefCommodityID(Commodity.DEFAULT_VALUE_RefCommodityID);
        c.setRefCommodityMultiple(Commodity.DEFAULT_VALUE_RefCommodityMultiple);
        c.setShelfLife(0);
        c.setLatestPricePurchase((long) Commodity.DEFAULT_VALUE_LatestPricePurchase);
        c.setPurchaseFlag(0);
        String err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, "");
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //("测试期初值");
        c.setnOStart(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_nOStartOfService);
        c.setnOStart(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_nOStartOfService);
        c.setnOStart(Commodity.NO_START_Default);
        //("测试期初采购价");
        c.setPurchasingPriceStart(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchasingPriceStartOfService);
        c.setPurchasingPriceStart(1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchasingPriceStartOfService);
        c.setPurchasingPriceStart(Commodity.PURCHASING_PRICE_START_Default);
        //只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName(" ");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A.#%%.");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A.#%%. ");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克123&*&*&");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(10000);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_status);
        c.setStatus(BaseSQLiteBO.INVALID_STATUS);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_status);
        c.setStatus(0);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10l);
        //("测试批发价");
        c.setPriceWholesale(-1l);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10l);
        //("测试保质期");
        c.setShelfLife(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shelfLifeOfService);
        c.setShelfLife(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shelfLifeOfService);
        c.setShelfLife(0);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试商品类型");
        c.setType(BaseSQLiteBO.INVALID_Type);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_typeOfService);
        c.setType(CommodityType.EnumCommodityType.ECT_Service.getIndex());
        //("测试int2---staffID");
        c.setOperatorStaffID(BaseSQLiteBO.INVALID_INT_ID);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
        c.setOperatorStaffID(1);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue1("123");
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue2("123");
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue3("123");
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue4("123");
        //("测试最近采购价");
        c.setLatestPricePurchase(0);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_latestPricePurchaseOfService);
        c.setLatestPricePurchase(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_latestPricePurchaseOfService);
        c.setLatestPricePurchase((long) Commodity.DEFAULT_VALUE_LatestPricePurchase);
        //("测试采购阀值");
        c.setPurchaseFlag(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchaseFlagOfService);
        c.setPurchaseFlag(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchaseFlagOfService);
        c.setPurchaseFlag(0);
        //("测试采购单位");
        c.setPurchasingUnit("个");
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchasingUnitOfService);
        c.setPurchasingUnit(null);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, "");
        c.setPurchasingUnit("");
        //("测试库存");
        c.setNO(-1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FEIDL_ERROR_noOfService);
        c.setNO(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FEIDL_ERROR_noOfService);
        c.setNO(0);
        //("测试参照商品和参照商品倍数");
        c.setRefCommodityID(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodity);
        c.setRefCommodityID(Commodity.DEFAULT_VALUE_RefCommodityID);
        c.setRefCommodityMultiple(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodity);
        c.setRefCommodityID(1);
        err = c.checkCreate(BaseSQLiteBO.CASE_Commodity_CreateService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodity);
        c.setRefCommodityID(Commodity.DEFAULT_VALUE_RefCommodityID);
        c.setRefCommodityMultiple(Commodity.DEFAULT_VALUE_RefCommodityMultiple);
    }

    @Test
    public void test_checkCreate_CASE4() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        System.out.println(c.getSpecification().length());
        String err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, "");
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //("测试期初值");
        c.setPurchasingPriceStart(100l);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_nOStart);
        c.setPurchasingPriceStart(-1);
        //("测试期初采购价");
        c.setnOStart(100);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchasingPriceStart);
        c.setPurchasingPriceStart(100l);
        //只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName(" ");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A.#%%.");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A.#%%. ");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("￥￥￥￥**$$星巴克1234");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(9999);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_status);
        c.setStatus(0);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1l);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10l);
        //("测试批发价");
        c.setPriceWholesale(-1l);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10l);
        //("测试保质期");
        c.setShelfLife(0);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shelfLife);
        c.setShelfLife(10);

        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试商品类型");
        c.setType(BaseSQLiteBO.INVALID_Type);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_type);
        c.setType(CommodityType.EnumCommodityType.ECT_Normal.getIndex());
        //("测试int2---staffID");
        c.setOperatorStaffID(BaseSQLiteBO.INVALID_INT_ID);
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        //"测试propertyValue4
        c.setPropertyValue4(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.INVALID_INT_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
    }

    @Test
    public void test_checkUpdate_CASE1() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setNO(Commodity.DEFAULT_VALUE_CommodityNO);
        c.setType(CommodityType.EnumCommodityType.ECT_MultiPackaging.getIndex());
        c.setRefCommodityID(1);
        c.setRefCommodityMultiple(2);
        String err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, "");
        //("测试ID");
        c.setID(0l);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        c.setID(1l);
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //("测试名称");
        c.setName("   ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" uyueyr67");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("uyueyr67  ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("#++uyueyr67&&&&&&$$$");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(999);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityStatus);
        c.setStatus(1);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10);
        //("测试批发价");
        c.setPriceWholesale(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        //("测试库存");
        c.setNO(100);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_NOofMultiPackaging);
        c.setNO(Commodity.DEFAULT_VALUE_CommodityNO);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("多包装商品的参照商品倍数要是大于1,多包装商品的参照商品ID要是正整数");
        c.setRefCommodityMultiple(5);
        c.setRefCommodityID(-5);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodityOfMultiPackaging);
        c.setRefCommodityMultiple(-5);
        c.setRefCommodityID(5);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodityOfMultiPackaging);
        c.setRefCommodityMultiple(5);
        c.setRefCommodityID(5);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue1("1234@@%%");
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue2("1234@@%%");
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue3("1234@@%%");
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue4("1234@@%%");

        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, "");
    }

    @Test
    public void test_checkUpdate_CASE2() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setLatestPricePurchase( Commodity.DEFAULT_VALUE_LatestPricePurchase);
        String err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, "");
        //("测试ID");
        c.setID(0l);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        c.setID(1l);
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        // 只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName("   ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A.#%%.");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A.#%%. ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("&^2345678$^");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(999);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityStatus);
        c.setStatus(1);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10);
        //("测试批发价");
        c.setPriceWholesale(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        // // caseLog("测试条形码");
        // c.setShelfLife(10);
        // c.setString1("条形码");
        // err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        // Assert.assertEquals(err, Commodity.FIELD_ERROR_barcode);
        // c.setString1(" ");
        // err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        // Assert.assertEquals(err, Commodity.FIELD_ERROR_barcode);
        // c.setString1("^^^&*^*");
        // err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        // Assert.assertEquals(err, Commodity.FIELD_ERROR_barcode);
        // c.setString1("1234567812345678123456781234567812345678123456781234567812345678aaaa");
        // err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        // Assert.assertEquals(err, Commodity.FIELD_ERROR_barcode);
        // c.setString1("13456");
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试最近进货价");
        c.setLatestPricePurchase(-100);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_latestPricePurchase);
        c.setLatestPricePurchase( Commodity.DEFAULT_VALUE_LatestPricePurchase);
        //("测试int2---StaffID");
        c.setOperatorStaffID(BaseSQLiteBO.INVALID_INT_ID);
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
        c.setOperatorStaffID(1);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue1("1234@@%%");
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue2("1234@@%%");
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue3("1234@@%%");
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue4("1234@@%%");

        err = c.checkUpdate(BaseSQLiteBO.CASE_Commodity_UpdatePrice);
        Assert.assertEquals(err, "");
    }

    @Test
    public void test_checkUpdate_CASE3() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setPurchasingUnit("个");
        String err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, "");
        //("测试ID");
        c.setID(0l);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        c.setID(1l);
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        // 只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName("   ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A..");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("*7&&45678&&");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(999);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfMultiPackaging);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityStatus);
        c.setStatus(1);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10);
        //("测试批发价");
        c.setPriceWholesale(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试采购单位");
        c.setPurchasingUnit("个！@￥（￥");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchasingUnit);
        c.setPurchasingUnit("1234567812345678aaa");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchasingUnit);
        c.setPurchasingUnit("个");
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkCreate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue1("1234@@%%");
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue2("1234@@%%");
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue3("1234@@%%");
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue4("1234@@%%");

        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdatePurchasingUnit);
        Assert.assertEquals(err, "");
    }

    @Test
    public void test_checkUpdate_CASE4() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        c.setShelfLife(0);
        c.setPurchaseFlag(0);
        c.setLatestPricePurchase( Commodity.DEFAULT_VALUE_LatestPricePurchase);
        c.setRefCommodityID(Commodity.DEFAULT_VALUE_RefCommodityID);
        c.setRefCommodityMultiple(Commodity.DEFAULT_VALUE_RefCommodityMultiple);
        String err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, "");
        //("测试ID");
        c.setID(0l);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        c.setID(1l);
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName("   ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A.#%%.");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A.#%%. ");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("^^星巴克123&&");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(9999);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityStatus);
        c.setStatus(0);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10);
        //("测试批发价");
        c.setPriceWholesale(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        //("测试保质期");
        c.setShelfLife(1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shelfLifeOfService);
        c.setShelfLife(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shelfLifeOfService);
        c.setShelfLife(0);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试int2---staffID");
//        c.setInt2(0);
//        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
//        c.setInt2(BaseSQLiteBO.INVALID_INT_ID);
//        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
//        c.setInt2(1);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue1("1234@@%%");
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue2("1234@@%%");
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue3("1234@@%%");
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue4("1234@@%%");
        //("测试最近采购价");
        c.setLatestPricePurchase(0);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_latestPricePurchaseOfService);
        c.setLatestPricePurchase(1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_latestPricePurchaseOfService);
        c.setLatestPricePurchase( Commodity.DEFAULT_VALUE_LatestPricePurchase);
        //("测试采购阀值");
        c.setPurchaseFlag(1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchaseFlagOfService);
        c.setPurchaseFlag(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_purchaseFlagOfService);
        c.setPurchaseFlag(0);
        //("测试参照商品和参照商品倍数");
        c.setRefCommodityID(1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodity);
        c.setRefCommodityID(Commodity.DEFAULT_VALUE_RefCommodityID);
        c.setRefCommodityMultiple(1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodity);
        c.setRefCommodityID(1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_refCommodity);
        c.setRefCommodityID(Commodity.DEFAULT_VALUE_RefCommodityID);
        c.setRefCommodityMultiple(Commodity.DEFAULT_VALUE_RefCommodityMultiple);
        //("测试积分规则");
        c.setRuleOfPoint(-1);
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_ruleOfPoint);
        c.setRuleOfPoint(1);
        //
        err = c.checkUpdate(BaseSQLiteBO.CASE_UpdateCommodityOfService);
        Assert.assertEquals(err, "");
    }

    @Test
    public void test_checkUpdate_CASE5() {
        Shared.printTestMethodStartInfo();

        Commodity c = getCommodity();
        String err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, "");
        //("测试ID");
        c.setID(0l);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        c.setID(1l);
        //("测试助记码");
        c.setMnemonicCode("助记码");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_mnemonicCode);
        c.setMnemonicCode("xbk");
        //("测试标记");
        c.setTag("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_tag);
        c.setTag("12345678");
        //("测试简称");
        c.setShortName("饮料..#%%");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("12345678123456781234567812345678a");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shortName);
        c.setShortName("饮料");
        //只允许以()（）-—_、中英数值、空格形式出现，长度1到32("测试名称");
        c.setName("   ");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName(" 星巴克A.#%%.");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克A.#%%. ");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("星巴克12345678123456781234567812345678");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("&*星巴克123^&^&");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_name);
        c.setName("fdg( )（c）-—_啊星巴克A");
        //("测试状态码");
        c.setStatus(9999);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityStatus);
        c.setStatus(0);
        //("测试规格");
        c.setSpecification("@#^*$");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("12345678a");
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_specification);
        c.setSpecification("个");
        //("测试包装单位");
        c.setPackageUnitID(-1);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_packageUnitID);
        c.setPackageUnitID(1);
        //("测试品牌ID");
        c.setBrandID(0);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
        c.setBrandID(1);
        //("测试分类ID");
        c.setCategoryID(0);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
        c.setCategoryID(1);
        //("测试零售价");
        c.setPriceRetail(-1);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceRetail);
        c.setPriceRetail(1);
        //("测试会员价");
        c.setPriceVIP(-1);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceVIP);
        c.setPriceVIP(10);
        //("测试批发价");
        c.setPriceWholesale(-1);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_priceWholesale);
        c.setPriceWholesale(10);
        //("测试保质期");
        c.setShelfLife(0);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_shelfLife);
        c.setShelfLife(10);
        //("测试退货天数");
        c.setReturnDays(-1);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_returnDays);
        c.setReturnDays(1);
        //("测试商品类型");
        c.setType(-1);
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_type);
        c.setType(CommodityType.EnumCommodityType.ECT_Normal.getIndex());
        //("测试int2---staffID");
//        c.setInt2(BaseSQLiteBO.INVALID_INT_ID);
//        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_staff);
//        c.setInt2(1);
        //("测试propertyValue1");
        c.setPropertyValue1(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue1("1234@@%%");
        //("测试propertyValue2");
        c.setPropertyValue2(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue2("1234@@%%");
        //("测试propertyValue3");
        c.setPropertyValue3(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue3("1234@@%%");
        //("测试propertyValue4");
        c.setPropertyValue4(getRandomString(60));
        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_propertyValue);
        c.setPropertyValue4("1234@@%%");

        err = c.checkUpdate(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, "");
    }

    @Test
    public void test_checkRetrieveN_CASE1() {
        Shared.printTestMethodStartInfo();

        Commodity c = new Commodity();
        c.setID(1l);
        c.setFieldToCheckUnique(1);
        c.setPageIndex(String.valueOf(1));
        c.setPageSize(String.valueOf(10));
        c.setFieldToCheckUnique(1);
        c.setQueryKeyword("asd");
        String err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, "");
        //("测试ID");
        c.setID(0l);
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, "");
        c.setID(BaseSQLiteBO.INVALID_ID);
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_checkUniqueFieldID);
        c.setID(1l);
        //("测试FieldToCheckUnique");
        c.setFieldToCheckUnique(0);
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_checkUniqueField);
        c.setFieldToCheckUnique(1);
        //("测试string1");
        c.setQueryKeyword("123456789123456789123456789123456789");
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, Commodity.FIELD_ERROR_checkUniqueField);
        c.setQueryKeyword("123");
        //("测试PageIndex");
        c.setPageIndex(String.valueOf(0));
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_Paging);
        c.setPageIndex(String.valueOf(2));
        //("测试PageSize");
        c.setPageSize(String.valueOf(0));
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_CheckUniqueField);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_Paging);
        c.setPageSize(String.valueOf(5));
    }

    @Test
    public void test_checkRetrieveN_CASE2() {
        Shared.printTestMethodStartInfo();

        Commodity c = new Commodity();
        c.setID(1l);
        c.setPageIndex(String.valueOf(1));
        c.setPageSize(String.valueOf(10));
        String err = c.checkRetrieveN(BaseSQLiteBO.CASE_RetrieveNMultiPackageCommodity);
        Assert.assertEquals(err, "");
        c.setID(0l);
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_RetrieveNMultiPackageCommodity);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_ID);
        //("测试PageIndex");
        c.setPageIndex(String.valueOf(0));
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_RetrieveNMultiPackageCommodity);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_Paging);
        c.setPageIndex(String.valueOf(2));
        //("测试PageSize");
        c.setPageSize(String.valueOf(0));
        err = c.checkRetrieveN(BaseSQLiteBO.CASE_RetrieveNMultiPackageCommodity);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_Paging);
        c.setPageSize(String.valueOf(5));
    }

    @Test
    public void test_checkRetrieveN_CASE3() {
        Shared.printTestMethodStartInfo();

        Commodity c = new Commodity();
//        c.setStatus(0);
//        c.setNO(100);
//        c.setBrandID(1);
//        c.setCategoryID(1);
//        c.setType(CommodityType.EnumCommodityType.ECT_Normal.getIndex());
//        c.setQueryKeyword("123");
//        c.setPageIndex(String.valueOf(1));
//        c.setPageSize(String.valueOf(10));
//        c.setFieldToCheckUnique(-1);
//        String err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, "");
//        //("测试状态码");
//        c.setStatus(9);
//        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityStatus);
//        c.setStatus(0);
//        //("测试库存");
//        c.setNO(-9999);
//        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_NO);
//        c.setNO(100);
//        //("测试品牌ID");
//        c.setBrandID(0);
//        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_brandID);
//        c.setBrandID(1);
//        //("测试分类ID");
//        c.setCategoryID(0);
//        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_categoryID);
//        c.setCategoryID(1);
//        //("测试商品类型");
//        c.setType(999999);
//        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_commodityType);
//        c.setType(CommodityType.EnumCommodityType.ECT_Normal.getIndex());
        //("测试string1");
//        c.setString1("1234567812345678123456781234567812345678123456781234567812345678aaaaa");
//        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
//        Assert.assertEquals(err, Commodity.FIELD_ERROR_string1);
//        c.setString1("123");
        //("测试PageIndex");
        c.setPageIndex(String.valueOf(0));
        c.setPageSize(String.valueOf(0));
        String err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_Paging);
        c.setPageIndex(String.valueOf(2));
        //("测试PageSize");
        c.setPageSize(String.valueOf(0));
        err = c.checkRetrieveN(BaseSQLiteBO.INVALID_CASE_ID);
        Assert.assertEquals(err, FieldFormat.FIELD_ERROR_Paging);
        c.setPageSize(String.valueOf(5));
    }

    @Test
    public void test_checkRetrieveN_CASE4() {
        Shared.printTestMethodStartInfo();

        Commodity commodity = new Commodity();
        commodity.setBarcode("1234567a");
        String err = commodity.checkRetrieveN(BaseHttpBO.CASE_Commodity_RetrieveInventory);
        Assert.assertTrue(err, "".equals(err));
        //带有中文
        commodity.setBarcode("1234657测试");
        err = commodity.checkRetrieveN(BaseHttpBO.CASE_Commodity_RetrieveInventory);
        Assert.assertTrue(err, Commodity.FIELD_ERROR_barcode.equals(err));
        //带有空格
        commodity.setBarcode("1234657 ");
        err = commodity.checkRetrieveN(BaseHttpBO.CASE_Commodity_RetrieveInventory);
        Assert.assertTrue(err, Commodity.FIELD_ERROR_barcode.equals(err));
        //带有特殊符号
        commodity.setBarcode("1234657#$#@");
        err = commodity.checkRetrieveN(BaseHttpBO.CASE_Commodity_RetrieveInventory);
        Assert.assertTrue(err, Commodity.FIELD_ERROR_barcode.equals(err));
        //7位以下
        commodity.setBarcode("123465");
        err = commodity.checkRetrieveN(BaseHttpBO.CASE_Commodity_RetrieveInventory);
        Assert.assertTrue(err, Commodity.FIELD_ERROR_barcode.equals(err));
        //64位以上
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < Commodity.MAX_LENGTH_Barcodes + 1; i++){
            stringBuilder.append("1");
        }
        commodity.setBarcode(stringBuilder.toString());
        err = commodity.checkRetrieveN(BaseHttpBO.CASE_Commodity_RetrieveInventory);
        Assert.assertTrue(err, Commodity.FIELD_ERROR_barcode.equals(err));
    }


    // 随机生成指定长度的字符串
    public static String getRandomString(int length) {
        String str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Random random = new Random();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < length; i++) {
            int number = random.nextInt(62);
            sb.append(str.charAt(number));
        }
        return sb.toString();
    }
}
