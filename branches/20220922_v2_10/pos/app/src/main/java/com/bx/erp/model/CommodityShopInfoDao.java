package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_CommodityShopInfo".
*/
public class CommodityShopInfoDao extends AbstractDao<CommodityShopInfo, Long> {

    public static final String TABLENAME = "T_CommodityShopInfo";

    /**
     * Properties of entity CommodityShopInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property CommodityID = new Property(1, int.class, "commodityID", false, "F_CommodityID");
        public final static Property ShopID = new Property(2, int.class, "shopID", false, "F_ShopID");
        public final static Property LatestPricePurchase = new Property(3, double.class, "latestPricePurchase", false, "F_LatestPricePurchase");
        public final static Property PriceRetail = new Property(4, double.class, "priceRetail", false, "F_PriceRetail");
        public final static Property NO = new Property(5, int.class, "NO", false, "F_NO");
        public final static Property NOStart = new Property(6, int.class, "nOStart", false, "F_NOStart");
        public final static Property PurchasingPriceStart = new Property(7, double.class, "purchasingPriceStart", false, "F_PurchasingPriceStart");
        public final static Property CurrentWarehousingID = new Property(8, int.class, "currentWarehousingID", false, "F_CurrentWarehousingID");
    }


    public CommodityShopInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CommodityShopInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T_CommodityShopInfo\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_CommodityID\" INTEGER NOT NULL ," + // 1: commodityID
                "\"F_ShopID\" INTEGER NOT NULL ," + // 2: shopID
                "\"F_LatestPricePurchase\" REAL NOT NULL ," + // 3: latestPricePurchase
                "\"F_PriceRetail\" REAL NOT NULL ," + // 4: priceRetail
                "\"F_NO\" INTEGER NOT NULL ," + // 5: NO
                "\"F_NOStart\" INTEGER NOT NULL ," + // 6: nOStart
                "\"F_PurchasingPriceStart\" REAL NOT NULL ," + // 7: purchasingPriceStart
                "\"F_CurrentWarehousingID\" INTEGER NOT NULL );"); // 8: currentWarehousingID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T_CommodityShopInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommodityShopInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCommodityID());
        stmt.bindLong(3, entity.getShopID());
        stmt.bindDouble(4, entity.getLatestPricePurchase());
        stmt.bindDouble(5, entity.getPriceRetail());
        stmt.bindLong(6, entity.getNO());
        stmt.bindLong(7, entity.getNOStart());
        stmt.bindDouble(8, entity.getPurchasingPriceStart());
        stmt.bindLong(9, entity.getCurrentWarehousingID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommodityShopInfo entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getCommodityID());
        stmt.bindLong(3, entity.getShopID());
        stmt.bindDouble(4, entity.getLatestPricePurchase());
        stmt.bindDouble(5, entity.getPriceRetail());
        stmt.bindLong(6, entity.getNO());
        stmt.bindLong(7, entity.getNOStart());
        stmt.bindDouble(8, entity.getPurchasingPriceStart());
        stmt.bindLong(9, entity.getCurrentWarehousingID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CommodityShopInfo readEntity(Cursor cursor, int offset) {
        CommodityShopInfo entity = new CommodityShopInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // commodityID
            cursor.getInt(offset + 2), // shopID
            cursor.getDouble(offset + 3), // latestPricePurchase
            cursor.getDouble(offset + 4), // priceRetail
            cursor.getInt(offset + 5), // NO
            cursor.getInt(offset + 6), // nOStart
            cursor.getDouble(offset + 7), // purchasingPriceStart
            cursor.getInt(offset + 8) // currentWarehousingID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommodityShopInfo entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommodityID(cursor.getInt(offset + 1));
        entity.setShopID(cursor.getInt(offset + 2));
        entity.setLatestPricePurchase(cursor.getDouble(offset + 3));
        entity.setPriceRetail(cursor.getDouble(offset + 4));
        entity.setNO(cursor.getInt(offset + 5));
        entity.setNOStart(cursor.getInt(offset + 6));
        entity.setPurchasingPriceStart(cursor.getDouble(offset + 7));
        entity.setCurrentWarehousingID(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommodityShopInfo entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommodityShopInfo entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommodityShopInfo entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
