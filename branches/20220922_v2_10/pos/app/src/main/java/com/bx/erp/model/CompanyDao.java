package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "T_Company".
*/
public class CompanyDao extends AbstractDao<Company, Long> {

    public static final String TABLENAME = "T_Company";

    /**
     * Properties of entity Company.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "F_Name");
        public final static Property SN = new Property(2, String.class, "SN", false, "F_SN");
        public final static Property Status = new Property(3, int.class, "status", false, "F_Status");
        public final static Property BusinessLicenseSN = new Property(4, String.class, "businessLicenseSN", false, "F_BusinessLicenseSN");
        public final static Property BusinessLicensePicture = new Property(5, String.class, "businessLicensePicture", false, "F_BusinessLicensePicture");
        public final static Property BossName = new Property(6, String.class, "bossName", false, "F_BossName");
        public final static Property BossPhone = new Property(7, String.class, "bossPhone", false, "F_BossPhone");
        public final static Property BossPassword = new Property(8, String.class, "bossPassword", false, "F_BossPassword");
        public final static Property BossWechat = new Property(9, String.class, "bossWechat", false, "F_BossWechat");
        public final static Property DbName = new Property(10, String.class, "dbName", false, "F_DBName");
        public final static Property Key = new Property(11, String.class, "key", false, "F_Key");
        public final static Property Submchid = new Property(12, String.class, "submchid", false, "F_Submchid");
        public final static Property ExpireDatetime = new Property(13, java.util.Date.class, "expireDatetime", false, "F_ExpireDatetime");
        public final static Property CreateDatetime = new Property(14, java.util.Date.class, "createDatetime", false, "F_CreateDatetime");
        public final static Property UpdateDatetime = new Property(15, java.util.Date.class, "updateDatetime", false, "F_UpdateDatetime");
        public final static Property DbUserName = new Property(16, String.class, "dbUserName", false, "F_DBUserName");
        public final static Property DbUserPassword = new Property(17, String.class, "dbUserPassword", false, "F_DBUserPassword");
    }


    public CompanyDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"T_Company\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_Name\" TEXT NOT NULL ," + // 1: name
                "\"F_SN\" TEXT NOT NULL ," + // 2: SN
                "\"F_Status\" INTEGER NOT NULL ," + // 3: status
                "\"F_BusinessLicenseSN\" TEXT," + // 4: businessLicenseSN
                "\"F_BusinessLicensePicture\" TEXT," + // 5: businessLicensePicture
                "\"F_BossName\" TEXT NOT NULL ," + // 6: bossName
                "\"F_BossPhone\" TEXT NOT NULL ," + // 7: bossPhone
                "\"F_BossPassword\" TEXT NOT NULL ," + // 8: bossPassword
                "\"F_BossWechat\" TEXT NOT NULL ," + // 9: bossWechat
                "\"F_DBName\" TEXT NOT NULL ," + // 10: dbName
                "\"F_Key\" TEXT NOT NULL ," + // 11: key
                "\"F_Submchid\" TEXT," + // 12: submchid
                "\"F_ExpireDatetime\" INTEGER NOT NULL ," + // 13: expireDatetime
                "\"F_CreateDatetime\" INTEGER NOT NULL ," + // 14: createDatetime
                "\"F_UpdateDatetime\" INTEGER NOT NULL ," + // 15: updateDatetime
                "\"F_DBUserName\" TEXT," + // 16: dbUserName
                "\"F_DBUserPassword\" TEXT);"); // 17: dbUserPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"T_Company\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Company entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getSN());
        stmt.bindLong(4, entity.getStatus());
 
        String businessLicenseSN = entity.getBusinessLicenseSN();
        if (businessLicenseSN != null) {
            stmt.bindString(5, businessLicenseSN);
        }
 
        String businessLicensePicture = entity.getBusinessLicensePicture();
        if (businessLicensePicture != null) {
            stmt.bindString(6, businessLicensePicture);
        }
        stmt.bindString(7, entity.getBossName());
        stmt.bindString(8, entity.getBossPhone());
        stmt.bindString(9, entity.getBossPassword());
        stmt.bindString(10, entity.getBossWechat());
        stmt.bindString(11, entity.getDbName());
        stmt.bindString(12, entity.getKey());
 
        String submchid = entity.getSubmchid();
        if (submchid != null) {
            stmt.bindString(13, submchid);
        }
        stmt.bindLong(14, entity.getExpireDatetime().getTime());
        stmt.bindLong(15, entity.getCreateDatetime().getTime());
        stmt.bindLong(16, entity.getUpdateDatetime().getTime());
 
        String dbUserName = entity.getDbUserName();
        if (dbUserName != null) {
            stmt.bindString(17, dbUserName);
        }
 
        String dbUserPassword = entity.getDbUserPassword();
        if (dbUserPassword != null) {
            stmt.bindString(18, dbUserPassword);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Company entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getSN());
        stmt.bindLong(4, entity.getStatus());
 
        String businessLicenseSN = entity.getBusinessLicenseSN();
        if (businessLicenseSN != null) {
            stmt.bindString(5, businessLicenseSN);
        }
 
        String businessLicensePicture = entity.getBusinessLicensePicture();
        if (businessLicensePicture != null) {
            stmt.bindString(6, businessLicensePicture);
        }
        stmt.bindString(7, entity.getBossName());
        stmt.bindString(8, entity.getBossPhone());
        stmt.bindString(9, entity.getBossPassword());
        stmt.bindString(10, entity.getBossWechat());
        stmt.bindString(11, entity.getDbName());
        stmt.bindString(12, entity.getKey());
 
        String submchid = entity.getSubmchid();
        if (submchid != null) {
            stmt.bindString(13, submchid);
        }
        stmt.bindLong(14, entity.getExpireDatetime().getTime());
        stmt.bindLong(15, entity.getCreateDatetime().getTime());
        stmt.bindLong(16, entity.getUpdateDatetime().getTime());
 
        String dbUserName = entity.getDbUserName();
        if (dbUserName != null) {
            stmt.bindString(17, dbUserName);
        }
 
        String dbUserPassword = entity.getDbUserPassword();
        if (dbUserPassword != null) {
            stmt.bindString(18, dbUserPassword);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Company readEntity(Cursor cursor, int offset) {
        Company entity = new Company( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // SN
            cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // businessLicenseSN
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // businessLicensePicture
            cursor.getString(offset + 6), // bossName
            cursor.getString(offset + 7), // bossPhone
            cursor.getString(offset + 8), // bossPassword
            cursor.getString(offset + 9), // bossWechat
            cursor.getString(offset + 10), // dbName
            cursor.getString(offset + 11), // key
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // submchid
            new java.util.Date(cursor.getLong(offset + 13)), // expireDatetime
            new java.util.Date(cursor.getLong(offset + 14)), // createDatetime
            new java.util.Date(cursor.getLong(offset + 15)), // updateDatetime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dbUserName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // dbUserPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Company entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setSN(cursor.getString(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setBusinessLicenseSN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBusinessLicensePicture(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBossName(cursor.getString(offset + 6));
        entity.setBossPhone(cursor.getString(offset + 7));
        entity.setBossPassword(cursor.getString(offset + 8));
        entity.setBossWechat(cursor.getString(offset + 9));
        entity.setDbName(cursor.getString(offset + 10));
        entity.setKey(cursor.getString(offset + 11));
        entity.setSubmchid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExpireDatetime(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setCreateDatetime(new java.util.Date(cursor.getLong(offset + 14)));
        entity.setUpdateDatetime(new java.util.Date(cursor.getLong(offset + 15)));
        entity.setDbUserName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDbUserPassword(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Company entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Company entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Company entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
