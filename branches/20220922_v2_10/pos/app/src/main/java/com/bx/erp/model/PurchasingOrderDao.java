package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "purchasingOrder".
*/
public class PurchasingOrderDao extends AbstractDao<PurchasingOrder, Long> {

    public static final String TABLENAME = "purchasingOrder";

    /**
     * Properties of entity PurchasingOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WarehousingNO = new Property(0, int.class, "warehousingNO", false, "WAREHOUSING_NO");
        public final static Property ID = new Property(1, Long.class, "ID", true, "F_ID");
        public final static Property Status = new Property(2, int.class, "status", false, "F_Status");
        public final static Property CreateDatetime = new Property(3, java.util.Date.class, "createDatetime", false, "F_CreateDatetime");
        public final static Property ApproveDatetime = new Property(4, java.util.Date.class, "approveDatetime", false, "F_ApproveDatetime");
        public final static Property EndDatetime = new Property(5, java.util.Date.class, "endDatetime", false, "F_EndDatetime");
        public final static Property ProviderID = new Property(6, int.class, "providerID", false, "F_ProviderID");
        public final static Property Remark = new Property(7, String.class, "remark", false, "F_Remark");
        public final static Property StaffID = new Property(8, int.class, "staffID", false, "F_StaffID");
        public final static Property ProviderName = new Property(9, String.class, "providerName", false, "F_ProviderName");
        public final static Property ApproverID = new Property(10, int.class, "approverID", false, "F_ApproverID");
        public final static Property UpdateDatetime = new Property(11, java.util.Date.class, "updateDatetime", false, "F_UpdateDatetime");
        public final static Property Sn = new Property(12, String.class, "sn", false, "F_SN");
    }


    public PurchasingOrderDao(DaoConfig config) {
        super(config);
    }
    
    public PurchasingOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"purchasingOrder\" (" + //
                "\"WAREHOUSING_NO\" INTEGER NOT NULL ," + // 0: warehousingNO
                "\"F_ID\" INTEGER PRIMARY KEY ," + // 1: ID
                "\"F_Status\" INTEGER NOT NULL ," + // 2: status
                "\"F_CreateDatetime\" INTEGER NOT NULL ," + // 3: createDatetime
                "\"F_ApproveDatetime\" INTEGER," + // 4: approveDatetime
                "\"F_EndDatetime\" INTEGER," + // 5: endDatetime
                "\"F_ProviderID\" INTEGER NOT NULL ," + // 6: providerID
                "\"F_Remark\" TEXT NOT NULL ," + // 7: remark
                "\"F_StaffID\" INTEGER NOT NULL ," + // 8: staffID
                "\"F_ProviderName\" TEXT NOT NULL ," + // 9: providerName
                "\"F_ApproverID\" INTEGER NOT NULL ," + // 10: approverID
                "\"F_UpdateDatetime\" INTEGER NOT NULL ," + // 11: updateDatetime
                "\"F_SN\" TEXT NOT NULL );"); // 12: sn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"purchasingOrder\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchasingOrder entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWarehousingNO());
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
        stmt.bindLong(3, entity.getStatus());
        stmt.bindLong(4, entity.getCreateDatetime().getTime());
 
        java.util.Date approveDatetime = entity.getApproveDatetime();
        if (approveDatetime != null) {
            stmt.bindLong(5, approveDatetime.getTime());
        }
 
        java.util.Date endDatetime = entity.getEndDatetime();
        if (endDatetime != null) {
            stmt.bindLong(6, endDatetime.getTime());
        }
        stmt.bindLong(7, entity.getProviderID());
        stmt.bindString(8, entity.getRemark());
        stmt.bindLong(9, entity.getStaffID());
        stmt.bindString(10, entity.getProviderName());
        stmt.bindLong(11, entity.getApproverID());
        stmt.bindLong(12, entity.getUpdateDatetime().getTime());
        stmt.bindString(13, entity.getSn());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchasingOrder entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getWarehousingNO());
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(2, ID);
        }
        stmt.bindLong(3, entity.getStatus());
        stmt.bindLong(4, entity.getCreateDatetime().getTime());
 
        java.util.Date approveDatetime = entity.getApproveDatetime();
        if (approveDatetime != null) {
            stmt.bindLong(5, approveDatetime.getTime());
        }
 
        java.util.Date endDatetime = entity.getEndDatetime();
        if (endDatetime != null) {
            stmt.bindLong(6, endDatetime.getTime());
        }
        stmt.bindLong(7, entity.getProviderID());
        stmt.bindString(8, entity.getRemark());
        stmt.bindLong(9, entity.getStaffID());
        stmt.bindString(10, entity.getProviderName());
        stmt.bindLong(11, entity.getApproverID());
        stmt.bindLong(12, entity.getUpdateDatetime().getTime());
        stmt.bindString(13, entity.getSn());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public PurchasingOrder readEntity(Cursor cursor, int offset) {
        PurchasingOrder entity = new PurchasingOrder( //
            cursor.getInt(offset + 0), // warehousingNO
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // ID
            cursor.getInt(offset + 2), // status
            new java.util.Date(cursor.getLong(offset + 3)), // createDatetime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // approveDatetime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // endDatetime
            cursor.getInt(offset + 6), // providerID
            cursor.getString(offset + 7), // remark
            cursor.getInt(offset + 8), // staffID
            cursor.getString(offset + 9), // providerName
            cursor.getInt(offset + 10), // approverID
            new java.util.Date(cursor.getLong(offset + 11)), // updateDatetime
            cursor.getString(offset + 12) // sn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchasingOrder entity, int offset) {
        entity.setWarehousingNO(cursor.getInt(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setCreateDatetime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setApproveDatetime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setEndDatetime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setProviderID(cursor.getInt(offset + 6));
        entity.setRemark(cursor.getString(offset + 7));
        entity.setStaffID(cursor.getInt(offset + 8));
        entity.setProviderName(cursor.getString(offset + 9));
        entity.setApproverID(cursor.getInt(offset + 10));
        entity.setUpdateDatetime(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setSn(cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchasingOrder entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchasingOrder entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PurchasingOrder entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
