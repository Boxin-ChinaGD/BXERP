package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RememberLoginStaff".
*/
public class RemeberLoginStaffDao extends AbstractDao<RememberLoginStaff, Void> {

    public static final String TABLENAME = "RememberLoginStaff";

    /**
     * Properties of entity RememberLoginStaff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Phone = new Property(0, String.class, "phone", false, "F_phone");
        public final static Property Password = new Property(1, String.class, "password", false, "F_password");
        public final static Property Ischeckremember = new Property(2, boolean.class, "ischeckremember", false, "F_ischeckremember");
    }


    public RemeberLoginStaffDao(DaoConfig config) {
        super(config);
    }
    
    public RemeberLoginStaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RememberLoginStaff\" (" + //
                "\"F_phone\" TEXT," + // 0: phone
                "\"F_password\" TEXT," + // 1: password
                "\"F_ischeckremember\" INTEGER NOT NULL );"); // 2: ischeckremember
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RememberLoginStaff\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RememberLoginStaff entity) {
        stmt.clearBindings();
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(1, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
        stmt.bindLong(3, entity.getRemembered() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RememberLoginStaff entity) {
        stmt.clearBindings();
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(1, phone);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
        stmt.bindLong(3, entity.getRemembered() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RememberLoginStaff readEntity(Cursor cursor, int offset) {
        RememberLoginStaff entity = new RememberLoginStaff( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // phone
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.getShort(offset + 2) != 0 // ischeckremember
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RememberLoginStaff entity, int offset) {
        entity.setPhone(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRemembered(cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RememberLoginStaff entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RememberLoginStaff entity) {
        return null;
    }

    @Override
    public boolean hasKey(RememberLoginStaff entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
