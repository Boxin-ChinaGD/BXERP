package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "retailTradeCommodity".
*/
public class RetailTradeCommodityDao extends AbstractDao<RetailTradeCommodity, Long> {

    public static final String TABLENAME = "retailTradeCommodity";

    /**
     * Properties of entity RetailTradeCommodity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property CommodityName = new Property(1, String.class, "commodityName", false, "F_CommodityName");
        public final static Property TradeID = new Property(2, Long.class, "tradeID", false, "F_TradeID");
        public final static Property SyncDatetime = new Property(3, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
        public final static Property SyncType = new Property(4, String.class, "syncType", false, "F_SyncType");
        public final static Property CommodityID = new Property(5, int.class, "commodityID", false, "F_CommodityID");
        public final static Property NO = new Property(6, int.class, "NO", false, "F_NO");
        public final static Property PriceOriginal = new Property(7, double.class, "priceOriginal", false, "F_PriceOriginal");
        public final static Property NOCanReturn = new Property(8, int.class, "NOCanReturn", false, "F_NOCanReturn");
        public final static Property PriceReturn = new Property(9, double.class, "priceReturn", false, "F_PriceReturn");
        public final static Property PriceSpecialOffer = new Property(10, double.class, "priceSpecialOffer", false, "F_PriceSpecialOffer");
        public final static Property PriceVIPOriginal = new Property(11, double.class, "priceVIPOriginal", false, "F_PriceVIPOriginal");
        public final static Property BarcodeID = new Property(12, int.class, "barcodeID", false, "F_BarcodeID");
        public final static Property PromotionID = new Property(13, Long.class, "promotionID", false, "F_PromotionID");
    }


    public RetailTradeCommodityDao(DaoConfig config) {
        super(config);
    }
    
    public RetailTradeCommodityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"retailTradeCommodity\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"F_CommodityName\" TEXT," + // 1: commodityName
                "\"F_TradeID\" INTEGER NOT NULL ," + // 2: tradeID
                "\"F_SyncDatetime\" INTEGER," + // 3: syncDatetime
                "\"F_SyncType\" TEXT," + // 4: syncType
                "\"F_CommodityID\" INTEGER NOT NULL ," + // 5: commodityID
                "\"F_NO\" INTEGER NOT NULL ," + // 6: NO
                "\"F_PriceOriginal\" REAL NOT NULL ," + // 7: priceOriginal
                "\"F_NOCanReturn\" INTEGER NOT NULL ," + // 8: NOCanReturn
                "\"F_PriceReturn\" REAL NOT NULL ," + // 9: priceReturn
                "\"F_PriceSpecialOffer\" REAL NOT NULL ," + // 10: priceSpecialOffer
                "\"F_PriceVIPOriginal\" REAL NOT NULL ," + // 11: priceVIPOriginal
                "\"F_BarcodeID\" INTEGER NOT NULL ," + // 12: barcodeID
                "\"F_PromotionID\" INTEGER);"); // 13: promotionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"retailTradeCommodity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RetailTradeCommodity entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(2, commodityName);
        }
        stmt.bindLong(3, entity.getTradeID());
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(4, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(5, syncType);
        }
        stmt.bindLong(6, entity.getCommodityID());
        stmt.bindLong(7, entity.getNO());
        stmt.bindDouble(8, entity.getPriceOriginal());
        stmt.bindLong(9, entity.getNOCanReturn());
        stmt.bindDouble(10, entity.getPriceReturn());
        stmt.bindDouble(11, entity.getPriceSpecialOffer());
        stmt.bindDouble(12, entity.getPriceVIPOriginal());
        stmt.bindLong(13, entity.getBarcodeID());
 
        Long promotionID = entity.getPromotionID();
        if (promotionID != null) {
            stmt.bindLong(14, promotionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RetailTradeCommodity entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String commodityName = entity.getCommodityName();
        if (commodityName != null) {
            stmt.bindString(2, commodityName);
        }
        stmt.bindLong(3, entity.getTradeID());
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(4, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(5, syncType);
        }
        stmt.bindLong(6, entity.getCommodityID());
        stmt.bindLong(7, entity.getNO());
        stmt.bindDouble(8, entity.getPriceOriginal());
        stmt.bindLong(9, entity.getNOCanReturn());
        stmt.bindDouble(10, entity.getPriceReturn());
        stmt.bindDouble(11, entity.getPriceSpecialOffer());
        stmt.bindDouble(12, entity.getPriceVIPOriginal());
        stmt.bindLong(13, entity.getBarcodeID());
 
        Long promotionID = entity.getPromotionID();
        if (promotionID != null) {
            stmt.bindLong(14, promotionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RetailTradeCommodity readEntity(Cursor cursor, int offset) {
        RetailTradeCommodity entity = new RetailTradeCommodity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // commodityName
            cursor.getLong(offset + 2), // tradeID
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // syncDatetime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // syncType
            cursor.getInt(offset + 5), // commodityID
            cursor.getInt(offset + 6), // NO
            cursor.getDouble(offset + 7), // priceOriginal
            cursor.getInt(offset + 8), // NOCanReturn
            cursor.getDouble(offset + 9), // priceReturn
            cursor.getDouble(offset + 10), // priceSpecialOffer
            cursor.getDouble(offset + 11), // priceVIPOriginal
            cursor.getInt(offset + 12), // barcodeID
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // promotionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RetailTradeCommodity entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommodityName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTradeID(cursor.getLong(offset + 2));
        entity.setSyncDatetime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSyncType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommodityID(cursor.getInt(offset + 5));
        entity.setNO(cursor.getInt(offset + 6));
        entity.setPriceOriginal(cursor.getDouble(offset + 7));
        entity.setNOCanReturn(cursor.getInt(offset + 8));
        entity.setPriceReturn(cursor.getDouble(offset + 9));
        entity.setPriceSpecialOffer(cursor.getDouble(offset + 10));
        entity.setPriceVIPOriginal(cursor.getDouble(offset + 11));
        entity.setBarcodeID(cursor.getInt(offset + 12));
        entity.setPromotionID(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RetailTradeCommodity entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RetailTradeCommodity entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RetailTradeCommodity entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
