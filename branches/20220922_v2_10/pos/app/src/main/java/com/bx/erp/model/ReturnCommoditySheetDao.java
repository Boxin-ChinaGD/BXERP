package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "returnCommoditySheet".
*/
public class ReturnCommoditySheetDao extends AbstractDao<ReturnCommoditySheet, Long> {

    public static final String TABLENAME = "returnCommoditySheet";

    /**
     * Properties of entity ReturnCommoditySheet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property StaffID = new Property(1, int.class, "staffID", false, "F_StaffID");
        public final static Property ProviderID = new Property(2, int.class, "providerID", false, "F_ProviderID");
        public final static Property CreateDate = new Property(3, java.util.Date.class, "createDate", false, "F_CreateDate");
        public final static Property Status = new Property(4, int.class, "status", false, "F_Status");
        public final static Property Sn = new Property(5, String.class, "sn", false, "F_SN");
    }


    public ReturnCommoditySheetDao(DaoConfig config) {
        super(config);
    }
    
    public ReturnCommoditySheetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"returnCommoditySheet\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"F_StaffID\" INTEGER NOT NULL ," + // 1: staffID
                "\"F_ProviderID\" INTEGER NOT NULL ," + // 2: providerID
                "\"F_CreateDate\" INTEGER NOT NULL ," + // 3: createDate
                "\"F_Status\" INTEGER NOT NULL ," + // 4: status
                "\"F_SN\" TEXT NOT NULL );"); // 5: sn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"returnCommoditySheet\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReturnCommoditySheet entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getStaffID());
        stmt.bindLong(3, entity.getProviderID());
        stmt.bindLong(4, entity.getCreateDate().getTime());
        stmt.bindLong(5, entity.getStatus());
        stmt.bindString(6, entity.getSn());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReturnCommoditySheet entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getStaffID());
        stmt.bindLong(3, entity.getProviderID());
        stmt.bindLong(4, entity.getCreateDate().getTime());
        stmt.bindLong(5, entity.getStatus());
        stmt.bindString(6, entity.getSn());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReturnCommoditySheet readEntity(Cursor cursor, int offset) {
        ReturnCommoditySheet entity = new ReturnCommoditySheet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // staffID
            cursor.getInt(offset + 2), // providerID
            new java.util.Date(cursor.getLong(offset + 3)), // createDate
            cursor.getInt(offset + 4), // status
            cursor.getString(offset + 5) // sn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReturnCommoditySheet entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStaffID(cursor.getInt(offset + 1));
        entity.setProviderID(cursor.getInt(offset + 2));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setSn(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReturnCommoditySheet entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReturnCommoditySheet entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReturnCommoditySheet entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
