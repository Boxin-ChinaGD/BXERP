package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class ShopDao extends AbstractDao<Shop, Void> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property BxStaffID = new Property(2, int.class, "bxStaffID", false, "BX_STAFF_ID");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property DistrictID = new Property(4, int.class, "districtID", false, "DISTRICT_ID");
        public final static Property CompanyID = new Property(5, long.class, "companyID", false, "COMPANY_ID");
        public final static Property Address = new Property(6, String.class, "address", false, "ADDRESS");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property Longitude = new Property(8, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(9, double.class, "latitude", false, "LATITUDE");
        public final static Property Key = new Property(10, String.class, "key", false, "KEY");
    }


    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: ID
                "\"NAME\" TEXT," + // 1: name
                "\"BX_STAFF_ID\" INTEGER NOT NULL ," + // 2: bxStaffID
                "\"REMARK\" TEXT," + // 3: remark
                "\"DISTRICT_ID\" INTEGER NOT NULL ," + // 4: districtID
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 5: companyID
                "\"ADDRESS\" TEXT," + // 6: address
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"LONGITUDE\" REAL NOT NULL ," + // 8: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 9: latitude
                "\"KEY\" TEXT);"); // 10: key
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getBxStaffID());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
        stmt.bindLong(5, entity.getDistrictID());
        stmt.bindLong(6, entity.getCompanyID());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getLatitude());
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(11, key);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getBxStaffID());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
        stmt.bindLong(5, entity.getDistrictID());
        stmt.bindLong(6, entity.getCompanyID());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getLatitude());
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(11, key);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // bxStaffID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.getInt(offset + 4), // districtID
            cursor.getLong(offset + 5), // companyID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.getInt(offset + 7), // status
            cursor.getDouble(offset + 8), // longitude
            cursor.getDouble(offset + 9), // latitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // key
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setID(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBxStaffID(cursor.getInt(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDistrictID(cursor.getInt(offset + 4));
        entity.setCompanyID(cursor.getLong(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setLongitude(cursor.getDouble(offset + 8));
        entity.setLatitude(cursor.getDouble(offset + 9));
        entity.setKey(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Shop entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Shop entity) {
        return null;
    }

    @Override
    public boolean hasKey(Shop entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
