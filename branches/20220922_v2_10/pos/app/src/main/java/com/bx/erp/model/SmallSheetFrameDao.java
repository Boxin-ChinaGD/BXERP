package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "smallSheetFrame".
*/
public class SmallSheetFrameDao extends AbstractDao<SmallSheetFrame, Long> {

    public static final String TABLENAME = "smallSheetFrame";

    /**
     * Properties of entity SmallSheetFrame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property Logo = new Property(1, String.class, "logo", false, "F_Logo");
        public final static Property CountOfBlankLineAtBottom = new Property(2, int.class, "countOfBlankLineAtBottom", false, "F_CountOfBlankLineAtBottom");
        public final static Property DelimiterToRepeat = new Property(3, String.class, "delimiterToRepeat", false, "F_DelimiterToRepeat");
        public final static Property SyncDatetime = new Property(4, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
        public final static Property CreateDatetime = new Property(5, java.util.Date.class, "createDatetime", false, "F_CreateDatetime");
        public final static Property UpdateDatetime = new Property(6, java.util.Date.class, "updateDatetime", false, "F_UpdateDatetime");
        public final static Property SyncType = new Property(7, String.class, "syncType", false, "F_SyncType");
    }


    public SmallSheetFrameDao(DaoConfig config) {
        super(config);
    }
    
    public SmallSheetFrameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"smallSheetFrame\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_Logo\" TEXT," + // 1: logo
                "\"F_CountOfBlankLineAtBottom\" INTEGER NOT NULL ," + // 2: countOfBlankLineAtBottom
                "\"F_DelimiterToRepeat\" TEXT," + // 3: delimiterToRepeat
                "\"F_SyncDatetime\" INTEGER," + // 4: syncDatetime
                "\"F_CreateDatetime\" INTEGER," + // 5: createDatetime
                "\"F_UpdateDatetime\" INTEGER," + // 6: updateDatetime
                "\"F_SyncType\" TEXT);"); // 7: syncType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"smallSheetFrame\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmallSheetFrame entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(2, logo);
        }
        stmt.bindLong(3, entity.getCountOfBlankLineAtBottom());
 
        String delimiterToRepeat = entity.getDelimiterToRepeat();
        if (delimiterToRepeat != null) {
            stmt.bindString(4, delimiterToRepeat);
        }
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(5, syncDatetime.getTime());
        }
 
        java.util.Date createDatetime = entity.getCreateDatetime();
        if (createDatetime != null) {
            stmt.bindLong(6, createDatetime.getTime());
        }
 
        java.util.Date updateDatetime = entity.getUpdateDatetime();
        if (updateDatetime != null) {
            stmt.bindLong(7, updateDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(8, syncType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmallSheetFrame entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(2, logo);
        }
        stmt.bindLong(3, entity.getCountOfBlankLineAtBottom());
 
        String delimiterToRepeat = entity.getDelimiterToRepeat();
        if (delimiterToRepeat != null) {
            stmt.bindString(4, delimiterToRepeat);
        }
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(5, syncDatetime.getTime());
        }
 
        java.util.Date createDatetime = entity.getCreateDatetime();
        if (createDatetime != null) {
            stmt.bindLong(6, createDatetime.getTime());
        }
 
        java.util.Date updateDatetime = entity.getUpdateDatetime();
        if (updateDatetime != null) {
            stmt.bindLong(7, updateDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(8, syncType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmallSheetFrame readEntity(Cursor cursor, int offset) {
        SmallSheetFrame entity = new SmallSheetFrame( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logo
            cursor.getInt(offset + 2), // countOfBlankLineAtBottom
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // delimiterToRepeat
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // syncDatetime
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createDatetime
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updateDatetime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // syncType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmallSheetFrame entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountOfBlankLineAtBottom(cursor.getInt(offset + 2));
        entity.setDelimiterToRepeat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSyncDatetime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setCreateDatetime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdateDatetime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSyncType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmallSheetFrame entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmallSheetFrame entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmallSheetFrame entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
