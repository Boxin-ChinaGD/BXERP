package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "smallSheetText".
*/
public class SmallSheetTextDao extends AbstractDao<SmallSheetText, Long> {

    public static final String TABLENAME = "smallSheetText";

    /**
     * Properties of entity SmallSheetText.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property Content = new Property(1, String.class, "content", false, "F_Content");
        public final static Property Size = new Property(2, float.class, "size", false, "F_Size");
        public final static Property Bold = new Property(3, int.class, "bold", false, "F_Bold");
        public final static Property Gravity = new Property(4, int.class, "gravity", false, "F_Gravity");
        public final static Property FrameId = new Property(5, Long.class, "frameId", false, "F_FrameID");
        public final static Property SyncDatetime = new Property(6, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
        public final static Property SyncType = new Property(7, String.class, "syncType", false, "F_SyncType");
    }


    public SmallSheetTextDao(DaoConfig config) {
        super(config);
    }
    
    public SmallSheetTextDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"smallSheetText\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"F_Content\" TEXT," + // 1: content
                "\"F_Size\" REAL NOT NULL ," + // 2: size
                "\"F_Bold\" INTEGER NOT NULL ," + // 3: bold
                "\"F_Gravity\" INTEGER NOT NULL ," + // 4: gravity
                "\"F_FrameID\" INTEGER," + // 5: frameId
                "\"F_SyncDatetime\" INTEGER," + // 6: syncDatetime
                "\"F_SyncType\" TEXT);"); // 7: syncType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"smallSheetText\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmallSheetText entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindDouble(3, entity.getSize());
        stmt.bindLong(4, entity.getBold());
        stmt.bindLong(5, entity.getGravity());
 
        Long frameId = entity.getFrameId();
        if (frameId != null) {
            stmt.bindLong(6, frameId);
        }
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(7, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(8, syncType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmallSheetText entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindDouble(3, entity.getSize());
        stmt.bindLong(4, entity.getBold());
        stmt.bindLong(5, entity.getGravity());
 
        Long frameId = entity.getFrameId();
        if (frameId != null) {
            stmt.bindLong(6, frameId);
        }
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(7, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(8, syncType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmallSheetText readEntity(Cursor cursor, int offset) {
        SmallSheetText entity = new SmallSheetText( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.getFloat(offset + 2), // size
            cursor.getInt(offset + 3), // bold
            cursor.getInt(offset + 4), // gravity
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // frameId
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // syncDatetime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // syncType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmallSheetText entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSize(cursor.getFloat(offset + 2));
        entity.setBold(cursor.getInt(offset + 3));
        entity.setGravity(cursor.getInt(offset + 4));
        entity.setFrameId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSyncDatetime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSyncType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmallSheetText entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmallSheetText entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmallSheetText entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
