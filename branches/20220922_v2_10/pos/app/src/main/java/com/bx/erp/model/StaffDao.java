package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Staff".
*/
public class StaffDao extends AbstractDao<Staff, Long> {

    public static final String TABLENAME = "Staff";

    /**
     * Properties of entity Staff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property Phone = new Property(1, String.class, "phone", false, "F_Phone");
        public final static Property Name = new Property(2, String.class, "name", false, "F_Name");
        public final static Property WeChat = new Property(3, String.class, "weChat", false, "F_WeChat");
        public final static Property ICID = new Property(4, String.class, "ICID", false, "F_ICID");
        public final static Property PasswordExpireDate = new Property(5, java.util.Date.class, "passwordExpireDate", false, "F_PasswordExpireDate");
        public final static Property IsFirstTimeLogin = new Property(6, int.class, "isFirstTimeLogin", false, "F_IsFirstTimeLogin");
        public final static Property ShopID = new Property(7, int.class, "shopID", false, "F_shopID");
        public final static Property DepartmentID = new Property(8, int.class, "departmentID", false, "F_DepartmentID");
        public final static Property Status = new Property(9, int.class, "status", false, "F_Status");
        public final static Property SyncDatetime = new Property(10, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
        public final static Property SyncType = new Property(11, String.class, "syncType", false, "F_SyncType");
        public final static Property PwdEncrypted = new Property(12, String.class, "pwdEncrypted", false, "F_PwdEncrypted");
        public final static Property Salt = new Property(13, String.class, "salt", false, "F_Salt");
        public final static Property PasswordInPOS = new Property(14, String.class, "passwordInPOS", false, "F_passwordInPOS");
        public final static Property RoleID = new Property(15, int.class, "roleID", false, "F_roleID");
    }


    public StaffDao(DaoConfig config) {
        super(config);
    }
    
    public StaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Staff\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_Phone\" TEXT NOT NULL ," + // 1: phone
                "\"F_Name\" TEXT NOT NULL ," + // 2: name
                "\"F_WeChat\" TEXT," + // 3: weChat
                "\"F_ICID\" TEXT," + // 4: ICID
                "\"F_PasswordExpireDate\" INTEGER," + // 5: passwordExpireDate
                "\"F_IsFirstTimeLogin\" INTEGER NOT NULL ," + // 6: isFirstTimeLogin
                "\"F_shopID\" INTEGER NOT NULL ," + // 7: shopID
                "\"F_DepartmentID\" INTEGER NOT NULL ," + // 8: departmentID
                "\"F_Status\" INTEGER NOT NULL ," + // 9: status
                "\"F_SyncDatetime\" INTEGER," + // 10: syncDatetime
                "\"F_SyncType\" TEXT," + // 11: syncType
                "\"F_PwdEncrypted\" TEXT," + // 12: pwdEncrypted
                "\"F_Salt\" TEXT," + // 13: salt
                "\"F_passwordInPOS\" TEXT," + // 14: passwordInPOS
                "\"F_roleID\" INTEGER NOT NULL );"); // 15: roleID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Staff\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getPhone());
        stmt.bindString(3, entity.getName());
 
        String weChat = entity.getWeChat();
        if (weChat != null) {
            stmt.bindString(4, weChat);
        }
 
        String ICID = entity.getICID();
        if (ICID != null) {
            stmt.bindString(5, ICID);
        }
 
        java.util.Date passwordExpireDate = entity.getPasswordExpireDate();
        if (passwordExpireDate != null) {
            stmt.bindLong(6, passwordExpireDate.getTime());
        }
        stmt.bindLong(7, entity.getIsFirstTimeLogin());
        stmt.bindLong(8, entity.getShopID());
        stmt.bindLong(9, entity.getDepartmentID());
        stmt.bindLong(10, entity.getStatus());
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(11, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(12, syncType);
        }
 
        String pwdEncrypted = entity.getPwdEncrypted();
        if (pwdEncrypted != null) {
            stmt.bindString(13, pwdEncrypted);
        }
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(14, salt);
        }
 
        String passwordInPOS = entity.getPasswordInPOS();
        if (passwordInPOS != null) {
            stmt.bindString(15, passwordInPOS);
        }
        stmt.bindLong(16, entity.getRoleID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getPhone());
        stmt.bindString(3, entity.getName());
 
        String weChat = entity.getWeChat();
        if (weChat != null) {
            stmt.bindString(4, weChat);
        }
 
        String ICID = entity.getICID();
        if (ICID != null) {
            stmt.bindString(5, ICID);
        }
 
        java.util.Date passwordExpireDate = entity.getPasswordExpireDate();
        if (passwordExpireDate != null) {
            stmt.bindLong(6, passwordExpireDate.getTime());
        }
        stmt.bindLong(7, entity.getIsFirstTimeLogin());
        stmt.bindLong(8, entity.getShopID());
        stmt.bindLong(9, entity.getDepartmentID());
        stmt.bindLong(10, entity.getStatus());
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(11, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(12, syncType);
        }
 
        String pwdEncrypted = entity.getPwdEncrypted();
        if (pwdEncrypted != null) {
            stmt.bindString(13, pwdEncrypted);
        }
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(14, salt);
        }
 
        String passwordInPOS = entity.getPasswordInPOS();
        if (passwordInPOS != null) {
            stmt.bindString(15, passwordInPOS);
        }
        stmt.bindLong(16, entity.getRoleID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Staff readEntity(Cursor cursor, int offset) {
        Staff entity = new Staff( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // phone
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // weChat
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ICID
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // passwordExpireDate
            cursor.getInt(offset + 6), // isFirstTimeLogin
            cursor.getInt(offset + 7), // shopID
            cursor.getInt(offset + 8), // departmentID
            cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // syncDatetime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // syncType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pwdEncrypted
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // salt
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // passwordInPOS
            cursor.getInt(offset + 15) // roleID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Staff entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setWeChat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setICID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPasswordExpireDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIsFirstTimeLogin(cursor.getInt(offset + 6));
        entity.setShopID(cursor.getInt(offset + 7));
        entity.setDepartmentID(cursor.getInt(offset + 8));
        entity.setStatus(cursor.getInt(offset + 9));
        entity.setSyncDatetime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setSyncType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPwdEncrypted(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSalt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPasswordInPOS(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRoleID(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Staff entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Staff entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Staff entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
