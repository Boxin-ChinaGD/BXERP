package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIP".
*/
public class VipDao extends AbstractDao<Vip, Long> {

    public static final String TABLENAME = "VIP";

    /**
     * Properties of entity Vip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property ICID = new Property(1, String.class, "iCID", false, "F_ICID");
        public final static Property StartRetailTreadeIDInSQLite = new Property(2, int.class, "startRetailTreadeIDInSQLite", false, "START_RETAIL_TREADE_IDIN_SQLITE");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "F_Mobile");
        public final static Property Name = new Property(4, String.class, "name", false, "F_Name");
        public final static Property Email = new Property(5, String.class, "email", false, "F_Email");
        public final static Property ConsumeTimes = new Property(6, int.class, "consumeTimes", false, "F_ConsumeTimes");
        public final static Property ConsumeAmount = new Property(7, double.class, "consumeAmount", false, "F_ConsumeAmount");
        public final static Property District = new Property(8, String.class, "district", false, "F_District");
        public final static Property Category = new Property(9, int.class, "category", false, "F_Category");
        public final static Property Status = new Property(10, int.class, "status", false, "F_Status");
        public final static Property Birthday = new Property(11, java.util.Date.class, "birthday", false, "F_Birthday");
        public final static Property Bonus = new Property(12, int.class, "bonus", false, "F_Bonus");
        public final static Property LastConsumeDatetime = new Property(13, java.util.Date.class, "lastConsumeDatetime", false, "F_LastConsumeDatetime");
        public final static Property LocalPosSN = new Property(14, String.class, "localPosSN", false, "F_LocalPosSN");
        public final static Property SyncDatetime = new Property(15, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
        public final static Property SyncType = new Property(16, String.class, "syncType", false, "F_SyncType");
        public final static Property CardID = new Property(17, int.class, "cardID", false, "F_CardID");
    }


    public VipDao(DaoConfig config) {
        super(config);
    }
    
    public VipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIP\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_ICID\" TEXT NOT NULL ," + // 1: iCID
                "\"START_RETAIL_TREADE_IDIN_SQLITE\" INTEGER NOT NULL ," + // 2: startRetailTreadeIDInSQLite
                "\"F_Mobile\" TEXT NOT NULL ," + // 3: mobile
                "\"F_Name\" TEXT NOT NULL ," + // 4: name
                "\"F_Email\" TEXT NOT NULL ," + // 5: email
                "\"F_ConsumeTimes\" INTEGER NOT NULL ," + // 6: consumeTimes
                "\"F_ConsumeAmount\" REAL NOT NULL ," + // 7: consumeAmount
                "\"F_District\" TEXT NOT NULL ," + // 8: district
                "\"F_Category\" INTEGER NOT NULL ," + // 9: category
                "\"F_Status\" INTEGER NOT NULL ," + // 10: status
                "\"F_Birthday\" INTEGER NOT NULL ," + // 11: birthday
                "\"F_Bonus\" INTEGER NOT NULL ," + // 12: bonus
                "\"F_LastConsumeDatetime\" INTEGER NOT NULL ," + // 13: lastConsumeDatetime
                "\"F_LocalPosSN\" TEXT NOT NULL ," + // 14: localPosSN
                "\"F_SyncDatetime\" INTEGER," + // 15: syncDatetime
                "\"F_SyncType\" TEXT," + // 16: syncType
                "\"F_CardID\" INTEGER NOT NULL );"); // 17: cardID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vip entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getICID());
        stmt.bindLong(3, entity.getStartRetailTreadeIDInSQLite());
        stmt.bindString(4, entity.getMobile());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getEmail());
        stmt.bindLong(7, entity.getConsumeTimes());
        stmt.bindDouble(8, entity.getConsumeAmount());
        stmt.bindString(9, entity.getDistrict());
        stmt.bindLong(10, entity.getCategory());
        stmt.bindLong(11, entity.getStatus());
        stmt.bindLong(12, entity.getBirthday().getTime());
        stmt.bindLong(13, entity.getBonus());
        stmt.bindLong(14, entity.getLastConsumeDatetime().getTime());
        stmt.bindString(15, entity.getLocalPosSN());
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(16, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(17, syncType);
        }
        stmt.bindLong(18, entity.getCardID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vip entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindString(2, entity.getICID());
        stmt.bindLong(3, entity.getStartRetailTreadeIDInSQLite());
        stmt.bindString(4, entity.getMobile());
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getEmail());
        stmt.bindLong(7, entity.getConsumeTimes());
        stmt.bindDouble(8, entity.getConsumeAmount());
        stmt.bindString(9, entity.getDistrict());
        stmt.bindLong(10, entity.getCategory());
        stmt.bindLong(11, entity.getStatus());
        stmt.bindLong(12, entity.getBirthday().getTime());
        stmt.bindLong(13, entity.getBonus());
        stmt.bindLong(14, entity.getLastConsumeDatetime().getTime());
        stmt.bindString(15, entity.getLocalPosSN());
 
        java.util.Date syncDatetime = entity.getSyncDatetime();
        if (syncDatetime != null) {
            stmt.bindLong(16, syncDatetime.getTime());
        }
 
        String syncType = entity.getSyncType();
        if (syncType != null) {
            stmt.bindString(17, syncType);
        }
        stmt.bindLong(18, entity.getCardID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Vip readEntity(Cursor cursor, int offset) {
        Vip entity = new Vip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // iCID
            cursor.getInt(offset + 2), // startRetailTreadeIDInSQLite
            cursor.getString(offset + 3), // mobile
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // email
            cursor.getInt(offset + 6), // consumeTimes
            cursor.getDouble(offset + 7), // consumeAmount
            cursor.getString(offset + 8), // district
            cursor.getInt(offset + 9), // category
            cursor.getInt(offset + 10), // status
            new java.util.Date(cursor.getLong(offset + 11)), // birthday
            cursor.getInt(offset + 12), // bonus
            new java.util.Date(cursor.getLong(offset + 13)), // lastConsumeDatetime
            cursor.getString(offset + 14), // localPosSN
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // syncDatetime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // syncType
            cursor.getInt(offset + 17) // cardID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vip entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setICID(cursor.getString(offset + 1));
        entity.setStartRetailTreadeIDInSQLite(cursor.getInt(offset + 2));
        entity.setMobile(cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setEmail(cursor.getString(offset + 5));
        entity.setConsumeTimes(cursor.getInt(offset + 6));
        entity.setConsumeAmount(cursor.getDouble(offset + 7));
        entity.setDistrict(cursor.getString(offset + 8));
        entity.setCategory(cursor.getInt(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
        entity.setBirthday(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setBonus(cursor.getInt(offset + 12));
        entity.setLastConsumeDatetime(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setLocalPosSN(cursor.getString(offset + 14));
        entity.setSyncDatetime(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setSyncType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCardID(cursor.getInt(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Vip entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Vip entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Vip entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
