package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "warehousingCommodity".
*/
public class WarehousingCommodityDao extends AbstractDao<WarehousingCommodity, Long> {

    public static final String TABLENAME = "warehousingCommodity";

    /**
     * Properties of entity WarehousingCommodity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property WarehousingID = new Property(1, int.class, "warehousingID", false, "F_WarehousingID");
        public final static Property CommodityID = new Property(2, int.class, "commodityID", false, "F_CommodityID");
        public final static Property NO = new Property(3, int.class, "NO", false, "F_NO");
        public final static Property Price = new Property(4, double.class, "price", false, "F_Price");
        public final static Property Amount = new Property(5, double.class, "amount", false, "F_Amount");
        public final static Property ProductionDatetime = new Property(6, java.util.Date.class, "productionDatetime", false, "F_ProductionDatetime");
        public final static Property ShelfLife = new Property(7, int.class, "shelfLife", false, "F_ShelfLife");
        public final static Property ExpireDatetime = new Property(8, java.util.Date.class, "expireDatetime", false, "F_ExpireDatetime");
        public final static Property PackageUnitID = new Property(9, int.class, "packageUnitID", false, "F_PackageUnitID");
        public final static Property CommodityName = new Property(10, String.class, "commodityName", false, "F_CommodityName");
        public final static Property BarcodeID = new Property(11, int.class, "barcodeID", false, "F_BarcodeID");
        public final static Property CreateDatetime = new Property(12, java.util.Date.class, "createDatetime", false, "F_CreateDatetime");
        public final static Property UpdateDatetime = new Property(13, java.util.Date.class, "updateDatetime", false, "F_UpdateDatetime");
    }


    public WarehousingCommodityDao(DaoConfig config) {
        super(config);
    }
    
    public WarehousingCommodityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"warehousingCommodity\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"F_WarehousingID\" INTEGER NOT NULL ," + // 1: warehousingID
                "\"F_CommodityID\" INTEGER NOT NULL ," + // 2: commodityID
                "\"F_NO\" INTEGER NOT NULL ," + // 3: NO
                "\"F_Price\" REAL NOT NULL ," + // 4: price
                "\"F_Amount\" REAL NOT NULL ," + // 5: amount
                "\"F_ProductionDatetime\" INTEGER NOT NULL ," + // 6: productionDatetime
                "\"F_ShelfLife\" INTEGER NOT NULL ," + // 7: shelfLife
                "\"F_ExpireDatetime\" INTEGER NOT NULL ," + // 8: expireDatetime
                "\"F_PackageUnitID\" INTEGER NOT NULL ," + // 9: packageUnitID
                "\"F_CommodityName\" TEXT NOT NULL ," + // 10: commodityName
                "\"F_BarcodeID\" INTEGER NOT NULL ," + // 11: barcodeID
                "\"F_CreateDatetime\" INTEGER NOT NULL ," + // 12: createDatetime
                "\"F_UpdateDatetime\" INTEGER NOT NULL );"); // 13: updateDatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"warehousingCommodity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WarehousingCommodity entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getWarehousingID());
        stmt.bindLong(3, entity.getCommodityID());
        stmt.bindLong(4, entity.getNO());
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindDouble(6, entity.getAmount());
        stmt.bindLong(7, entity.getProductionDatetime().getTime());
        stmt.bindLong(8, entity.getShelfLife());
        stmt.bindLong(9, entity.getExpireDatetime().getTime());
        stmt.bindLong(10, entity.getPackageUnitID());
        stmt.bindString(11, entity.getCommodityName());
        stmt.bindLong(12, entity.getBarcodeID());
        stmt.bindLong(13, entity.getCreateDatetime().getTime());
        stmt.bindLong(14, entity.getUpdateDatetime().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WarehousingCommodity entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getWarehousingID());
        stmt.bindLong(3, entity.getCommodityID());
        stmt.bindLong(4, entity.getNO());
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindDouble(6, entity.getAmount());
        stmt.bindLong(7, entity.getProductionDatetime().getTime());
        stmt.bindLong(8, entity.getShelfLife());
        stmt.bindLong(9, entity.getExpireDatetime().getTime());
        stmt.bindLong(10, entity.getPackageUnitID());
        stmt.bindString(11, entity.getCommodityName());
        stmt.bindLong(12, entity.getBarcodeID());
        stmt.bindLong(13, entity.getCreateDatetime().getTime());
        stmt.bindLong(14, entity.getUpdateDatetime().getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WarehousingCommodity readEntity(Cursor cursor, int offset) {
        WarehousingCommodity entity = new WarehousingCommodity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // warehousingID
            cursor.getInt(offset + 2), // commodityID
            cursor.getInt(offset + 3), // NO
            cursor.getDouble(offset + 4), // price
            cursor.getDouble(offset + 5), // amount
            new java.util.Date(cursor.getLong(offset + 6)), // productionDatetime
            cursor.getInt(offset + 7), // shelfLife
            new java.util.Date(cursor.getLong(offset + 8)), // expireDatetime
            cursor.getInt(offset + 9), // packageUnitID
            cursor.getString(offset + 10), // commodityName
            cursor.getInt(offset + 11), // barcodeID
            new java.util.Date(cursor.getLong(offset + 12)), // createDatetime
            new java.util.Date(cursor.getLong(offset + 13)) // updateDatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WarehousingCommodity entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWarehousingID(cursor.getInt(offset + 1));
        entity.setCommodityID(cursor.getInt(offset + 2));
        entity.setNO(cursor.getInt(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setAmount(cursor.getDouble(offset + 5));
        entity.setProductionDatetime(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setShelfLife(cursor.getInt(offset + 7));
        entity.setExpireDatetime(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPackageUnitID(cursor.getInt(offset + 9));
        entity.setCommodityName(cursor.getString(offset + 10));
        entity.setBarcodeID(cursor.getInt(offset + 11));
        entity.setCreateDatetime(new java.util.Date(cursor.getLong(offset + 12)));
        entity.setUpdateDatetime(new java.util.Date(cursor.getLong(offset + 13)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WarehousingCommodity entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WarehousingCommodity entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WarehousingCommodity entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
