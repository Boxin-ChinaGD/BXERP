package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bx.erp.model.wx.WxVipCardDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WX_VIP_CARD_DETAIL".
*/
public class WxVipCardDetailDao extends AbstractDao<WxVipCardDetail, Long> {

    public static final String TABLENAME = "WX_VIP_CARD_DETAIL";

    /**
     * Properties of entity WxVipCardDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property WxVipCardID = new Property(1, int.class, "wxVipCardID", false, "F_WxVipCardID");
        public final static Property Code = new Property(2, String.class, "code", false, "F_Code");
        public final static Property Card_id = new Property(3, String.class, "card_id", false, "F_CardID");
        public final static Property Background_pic_url = new Property(4, String.class, "background_pic_url", false, "F_BackgroundPicUrl");
        public final static Property OldUserCardCode = new Property(5, String.class, "oldUserCardCode", false, "F_OldUserCardCode");
        public final static Property IsGiveByFriend = new Property(6, int.class, "isGiveByFriend", false, "F_IsGiveByFriend");
        public final static Property FriendUserName = new Property(7, String.class, "friendUserName", false, "F_FriendUserName");
        public final static Property OuterStr = new Property(8, String.class, "outerStr", false, "F_OuterStr");
        public final static Property IsRestoreMemberCard = new Property(9, int.class, "isRestoreMemberCard", false, "F_IsRestoreMemberCard");
        public final static Property UnionId = new Property(10, String.class, "unionId", false, "F_UnionId");
        public final static Property MsgType = new Property(11, String.class, "msgType", false, "F_MsgType");
        public final static Property Event = new Property(12, String.class, "event", false, "F_Event");
        public final static Property ToUserName = new Property(13, String.class, "toUserName", false, "F_ToUserName");
    }


    public WxVipCardDetailDao(DaoConfig config) {
        super(config);
    }
    
    public WxVipCardDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WX_VIP_CARD_DETAIL\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_WxVipCardID\" INTEGER NOT NULL ," + // 1: wxVipCardID
                "\"F_Code\" TEXT," + // 2: code
                "\"F_CardID\" TEXT NOT NULL ," + // 3: card_id
                "\"F_BackgroundPicUrl\" TEXT NOT NULL ," + // 4: background_pic_url
                "\"F_OldUserCardCode\" TEXT," + // 5: oldUserCardCode
                "\"F_IsGiveByFriend\" INTEGER NOT NULL ," + // 6: isGiveByFriend
                "\"F_FriendUserName\" TEXT," + // 7: friendUserName
                "\"F_OuterStr\" TEXT," + // 8: outerStr
                "\"F_IsRestoreMemberCard\" INTEGER NOT NULL ," + // 9: isRestoreMemberCard
                "\"F_UnionId\" TEXT," + // 10: unionId
                "\"F_MsgType\" TEXT," + // 11: msgType
                "\"F_Event\" TEXT," + // 12: event
                "\"F_ToUserName\" TEXT);"); // 13: toUserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WX_VIP_CARD_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WxVipCardDetail entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getWxVipCardID());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
        stmt.bindString(4, entity.getCard_id());
        stmt.bindString(5, entity.getBackground_pic_url());
 
        String oldUserCardCode = entity.getOldUserCardCode();
        if (oldUserCardCode != null) {
            stmt.bindString(6, oldUserCardCode);
        }
        stmt.bindLong(7, entity.getIsGiveByFriend());
 
        String friendUserName = entity.getFriendUserName();
        if (friendUserName != null) {
            stmt.bindString(8, friendUserName);
        }
 
        String outerStr = entity.getOuterStr();
        if (outerStr != null) {
            stmt.bindString(9, outerStr);
        }
        stmt.bindLong(10, entity.getIsRestoreMemberCard());
 
        String unionId = entity.getUnionId();
        if (unionId != null) {
            stmt.bindString(11, unionId);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(12, msgType);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(13, event);
        }
 
        String toUserName = entity.getToUserName();
        if (toUserName != null) {
            stmt.bindString(14, toUserName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WxVipCardDetail entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getWxVipCardID());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
        stmt.bindString(4, entity.getCard_id());
        stmt.bindString(5, entity.getBackground_pic_url());
 
        String oldUserCardCode = entity.getOldUserCardCode();
        if (oldUserCardCode != null) {
            stmt.bindString(6, oldUserCardCode);
        }
        stmt.bindLong(7, entity.getIsGiveByFriend());
 
        String friendUserName = entity.getFriendUserName();
        if (friendUserName != null) {
            stmt.bindString(8, friendUserName);
        }
 
        String outerStr = entity.getOuterStr();
        if (outerStr != null) {
            stmt.bindString(9, outerStr);
        }
        stmt.bindLong(10, entity.getIsRestoreMemberCard());
 
        String unionId = entity.getUnionId();
        if (unionId != null) {
            stmt.bindString(11, unionId);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(12, msgType);
        }
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(13, event);
        }
 
        String toUserName = entity.getToUserName();
        if (toUserName != null) {
            stmt.bindString(14, toUserName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WxVipCardDetail readEntity(Cursor cursor, int offset) {
        WxVipCardDetail entity = new WxVipCardDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // wxVipCardID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.getString(offset + 3), // card_id
            cursor.getString(offset + 4), // background_pic_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // oldUserCardCode
            cursor.getInt(offset + 6), // isGiveByFriend
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // friendUserName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // outerStr
            cursor.getInt(offset + 9), // isRestoreMemberCard
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // unionId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // msgType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // event
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // toUserName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WxVipCardDetail entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWxVipCardID(cursor.getInt(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCard_id(cursor.getString(offset + 3));
        entity.setBackground_pic_url(cursor.getString(offset + 4));
        entity.setOldUserCardCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsGiveByFriend(cursor.getInt(offset + 6));
        entity.setFriendUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOuterStr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsRestoreMemberCard(cursor.getInt(offset + 9));
        entity.setUnionId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMsgType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEvent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setToUserName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WxVipCardDetail entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WxVipCardDetail entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WxVipCardDetail entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
