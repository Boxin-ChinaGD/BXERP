package com.bx.erp.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bx.erp.model.wx.WxVip;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WX_VIP".
*/
public class WxVipDao extends AbstractDao<WxVip, Long> {

    public static final String TABLENAME = "WX_VIP";

    /**
     * Properties of entity WxVip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
        public final static Property VipID = new Property(1, int.class, "vipID", false, "F_VipID");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "F_Nickname");
        public final static Property Bonus = new Property(3, int.class, "bonus", false, "F_Bonus");
        public final static Property Balance = new Property(4, double.class, "balance", false, "F_Balance");
        public final static Property Sex = new Property(5, int.class, "sex", false, "F_Sex");
        public final static Property User_info = new Property(6, String.class, "user_info", false, "F_UserInfo");
        public final static Property Custom_field_list = new Property(7, String.class, "custom_field_list", false, "F_CustomFieldList");
        public final static Property Name = new Property(8, String.class, "name", false, "F_Name");
        public final static Property Value = new Property(9, String.class, "value", false, "F_Value");
        public final static Property User_card_status = new Property(10, String.class, "user_card_status", false, "F_UserCardStatus");
        public final static Property LastUsedDateTime = new Property(11, java.util.Date.class, "lastUsedDateTime", false, "F_LastUsedDateTime");
        public final static Property PublicAccountOpenID = new Property(12, String.class, "publicAccountOpenID", false, "F_PublicAccountOpenID");
        public final static Property MiniProgramOpenID = new Property(13, String.class, "miniProgramOpenID", false, "F_MiniProgramOpenID");
        public final static Property UnionID = new Property(14, String.class, "unionID", false, "F_UnionID");
    }


    public WxVipDao(DaoConfig config) {
        super(config);
    }
    
    public WxVipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WX_VIP\" (" + //
                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"F_VipID\" INTEGER NOT NULL ," + // 1: vipID
                "\"F_Nickname\" TEXT NOT NULL ," + // 2: nickName
                "\"F_Bonus\" INTEGER NOT NULL ," + // 3: bonus
                "\"F_Balance\" REAL NOT NULL ," + // 4: balance
                "\"F_Sex\" INTEGER NOT NULL ," + // 5: sex
                "\"F_UserInfo\" TEXT NOT NULL ," + // 6: user_info
                "\"F_CustomFieldList\" TEXT NOT NULL ," + // 7: custom_field_list
                "\"F_Name\" TEXT NOT NULL ," + // 8: name
                "\"F_Value\" TEXT NOT NULL ," + // 9: value
                "\"F_UserCardStatus\" TEXT NOT NULL ," + // 10: user_card_status
                "\"F_LastUsedDateTime\" INTEGER NOT NULL ," + // 11: lastUsedDateTime
                "\"F_PublicAccountOpenID\" TEXT," + // 12: publicAccountOpenID
                "\"F_MiniProgramOpenID\" TEXT," + // 13: miniProgramOpenID
                "\"F_UnionID\" TEXT);"); // 14: unionID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WX_VIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WxVip entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getVipID());
        stmt.bindString(3, entity.getNickName());
        stmt.bindLong(4, entity.getBonus());
        stmt.bindDouble(5, entity.getBalance());
        stmt.bindLong(6, entity.getSex());
        stmt.bindString(7, entity.getUser_info());
        stmt.bindString(8, entity.getCustom_field_list());
        stmt.bindString(9, entity.getName());
        stmt.bindString(10, entity.getValue());
        stmt.bindString(11, entity.getUser_card_status());
        stmt.bindLong(12, entity.getLastUsedDateTime().getTime());
 
        String publicAccountOpenID = entity.getPublicAccountOpenID();
        if (publicAccountOpenID != null) {
            stmt.bindString(13, publicAccountOpenID);
        }
 
        String miniProgramOpenID = entity.getMiniProgramOpenID();
        if (miniProgramOpenID != null) {
            stmt.bindString(14, miniProgramOpenID);
        }
 
        String unionID = entity.getUnionID();
        if (unionID != null) {
            stmt.bindString(15, unionID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WxVip entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getVipID());
        stmt.bindString(3, entity.getNickName());
        stmt.bindLong(4, entity.getBonus());
        stmt.bindDouble(5, entity.getBalance());
        stmt.bindLong(6, entity.getSex());
        stmt.bindString(7, entity.getUser_info());
        stmt.bindString(8, entity.getCustom_field_list());
        stmt.bindString(9, entity.getName());
        stmt.bindString(10, entity.getValue());
        stmt.bindString(11, entity.getUser_card_status());
        stmt.bindLong(12, entity.getLastUsedDateTime().getTime());
 
        String publicAccountOpenID = entity.getPublicAccountOpenID();
        if (publicAccountOpenID != null) {
            stmt.bindString(13, publicAccountOpenID);
        }
 
        String miniProgramOpenID = entity.getMiniProgramOpenID();
        if (miniProgramOpenID != null) {
            stmt.bindString(14, miniProgramOpenID);
        }
 
        String unionID = entity.getUnionID();
        if (unionID != null) {
            stmt.bindString(15, unionID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WxVip readEntity(Cursor cursor, int offset) {
        WxVip entity = new WxVip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // vipID
            cursor.getString(offset + 2), // nickName
            cursor.getInt(offset + 3), // bonus
            cursor.getDouble(offset + 4), // balance
            cursor.getInt(offset + 5), // sex
            cursor.getString(offset + 6), // user_info
            cursor.getString(offset + 7), // custom_field_list
            cursor.getString(offset + 8), // name
            cursor.getString(offset + 9), // value
            cursor.getString(offset + 10), // user_card_status
            new java.util.Date(cursor.getLong(offset + 11)), // lastUsedDateTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // publicAccountOpenID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // miniProgramOpenID
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // unionID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WxVip entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVipID(cursor.getInt(offset + 1));
        entity.setNickName(cursor.getString(offset + 2));
        entity.setBonus(cursor.getInt(offset + 3));
        entity.setBalance(cursor.getDouble(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setUser_info(cursor.getString(offset + 6));
        entity.setCustom_field_list(cursor.getString(offset + 7));
        entity.setName(cursor.getString(offset + 8));
        entity.setValue(cursor.getString(offset + 9));
        entity.setUser_card_status(cursor.getString(offset + 10));
        entity.setLastUsedDateTime(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setPublicAccountOpenID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMiniProgramOpenID(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUnionID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WxVip entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WxVip entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WxVip entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
