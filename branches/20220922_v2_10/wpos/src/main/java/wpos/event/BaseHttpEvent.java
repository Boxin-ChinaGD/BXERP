package wpos.event;import com.alibaba.fastjson.JSONObject;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.context.annotation.Scope;import org.springframework.stereotype.Component;import wpos.http.HttpRequestUnit;import wpos.model.BaseModel;import wpos.model.ErrorInfo;import okhttp3.Response;@Component("baseHttpEvent")@Scope("prototype")public class BaseHttpEvent extends BaseEvent {    private Log log = LogFactory.getLog(this.getClass());    public static String netWorkStatus;    public static void setLastErrorCode() {    }    public String getResponseData() {        return responseData;    }    public void setResponseData(String responseData) {        this.responseData = responseData;    }    protected String responseData;    protected Response response;    public Response getResponse() {        return response;    }    public void setResponse(Response response) {        this.response = response;    }    public void setRequestType(HttpRequestUnit.EnumRequestType requestType) {        this.requestType = requestType;    }    public HttpRequestUnit.EnumRequestType getRequestType() {        return requestType;    }    protected HttpRequestUnit.EnumRequestType requestType;    public int getRequestID() {        return requestID;    }    public void setRequestID(int requestID) {        this.requestID = requestID;    }    protected int requestID;    public ErrorInfo.EnumErrorCode getLastErrorCode() {        return lastErrorCode;    }    public void setLastErrorCode(ErrorInfo.EnumErrorCode lastErrorCode) {        this.lastErrorCode = lastErrorCode;    }    public String getLastErrorMessage() {        return lastErrorMessage;    }    public void setLastErrorMessage(String lastErrorMessage) {        this.lastErrorMessage = lastErrorMessage;    }    public JSONObject parseError(String responseData) {        try {            log.info("服务器返回的数据是：" + responseData);            JSONObject jsonObject = JSONObject.parseObject(responseData);            String sErrCode = jsonObject.getString(BaseModel.JSON_ERROR_KEY);            setLastErrorCode(ErrorInfo.EnumErrorCode.valueOf(sErrCode));            if (getLastErrorCode() != ErrorInfo.EnumErrorCode.EC_NoError) {                String sErrorMsg = (String) jsonObject.get(BaseModel.KEY_HTMLTable_Parameter_msg);                setLastErrorMessage(sErrorMsg);            }            if (getLastErrorCode() == ErrorInfo.EnumErrorCode.EC_DuplicatedSession) {                HttpRequestStatus = 1;                HttpRequestWarnMsg = WARN_Msg_DuplicatedSession;            }            return jsonObject;        } catch (Exception e) {            e.printStackTrace();            // 会话过期时，服务器返回的是一个URL，POS端解析会失败。但可从其头部的sessionStatus知道是不是会话过期            String header = getResponse().header("sessionStatus");            if (header != null && header.equals("timeOut")) {                lastErrorCode = ErrorInfo.EnumErrorCode.EC_SessionTimeout;                HttpRequestStatus = 1;                HttpRequestWarnMsg = WARN_Msg_SessionTimeOut;            } else {                setLastErrorCode(ErrorInfo.EnumErrorCode.EC_OtherError);            }            return null;        }    }    public static final String WARN_Msg_DuplicatedSession = "您已经在其它地方登录";    public static final String WARN_Msg_SessionTimeOut = "会话过期，需要重新登录";    /**     * APP在任意的UI界面（登录界面除外）都可能存在会话被踢出或会话过期的情况。一旦会话被踢出或会话过期，需要通知UI跳转到登录界面。<br />     * 通知方法为：<br />     * 界面上设置定时器，定时检查HttpRequestStatus的值：<br />     * 当HttpRequestStatus为0时，界面不会被通知跳转。<br />     * 当HttpRequestStatus为1时，需要跳转到登录页面。<br />     * HttpRequestStatus的值由网络通信底层线程根据错误码设置。     */    public static int HttpRequestStatus = 0;    public static String HttpRequestWarnMsg = "";    /**     * 服务器返回对应model数据的总数，不是一页的pageSize     */    protected String count;    public String getCount() {        return count;    }    public void setCount(String count) {        this.count = count;    }    /**     * 临时会话ID。在Pos getToken()或staff getToken()时设置。登录成功后，赋值给GlobalControoler的SessionID     */    protected String tempSessionID;    public String getTempSessionID() {        return tempSessionID;    }    public void setTempSessionID(String tempSessionID) {        this.tempSessionID = tempSessionID;    }    public String getPwdEncrypted() {        return pwdEncrypted;    }    public void setPwdEncrypted(String pwdEncrypted) {        this.pwdEncrypted = pwdEncrypted;    }    protected String pwdEncrypted; // pos,staff登录时的加密密码    @Override    public String toString() {        return "BaseHttpEvent{" +                "requestType=" + requestType +                ", status=" + status +  //把基类的重要成员也打印出来                ", requestID=" + requestID +                ", count='" + count + '\'' +                ", response=" + response +                ", tempSessionID='" + tempSessionID + '\'' +                ", pwdEncrypted='" + pwdEncrypted + '\'' +//                ", responseData='" + responseData + '\'' +    // 太长而且onEvent()会parse，不打印                '}';    }}