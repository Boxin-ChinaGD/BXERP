//package wpos.model;
//
//import android.database.Cursor;
//import android.database.sqlite.SQLiteStatement;
//
//import org.greenrobot.greendao.AbstractDao;
//import org.greenrobot.greendao.Property;
//import org.greenrobot.greendao.internal.DaoConfig;
//import org.greenrobot.greendao.database.Database;
//import org.greenrobot.greendao.database.DatabaseStatement;
//
//// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
///**
// * DAO for table "POS".
//*/
//public class PosDao extends AbstractDao<Pos, Long> {
//
//    public static final String TABLENAME = "POS";
//
//    /**
//     * Properties of entity Pos.<br/>
//     * Can be used for QueryBuilder and for referencing column names.
//     */
//    public static class Properties {
//        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
//        public final static Property Pos_SN = new Property(1, String.class, "pos_SN", false, "F_POS_SN");
//        public final static Property ShopID = new Property(2, long.class, "shopID", false, "F_ShopID");
//        public final static Property PwdEncrypted = new Property(3, String.class, "pwdEncrypted", false, "F_PwdEncrypted");
//        public final static Property Salt = new Property(4, String.class, "salt", false, "F_Salt");
//        public final static Property PasswordInPOS = new Property(5, String.class, "passwordInPOS", false, "F_PasswordInPOS");
//        public final static Property SyncDatetime = new Property(6, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
//        public final static Property SyncType = new Property(7, String.class, "syncType", false, "F_SyncType");
//        public final static Property Status = new Property(8, int.class, "status", false, "F_Status");
//    }
//
//
//    public PosDao(DaoConfig config) {
//        super(config);
//    }
//
//    public PosDao(DaoConfig config, DaoSession daoSession) {
//        super(config, daoSession);
//    }
//
//    /** Creates the underlying database table. */
//    public static void createTable(Database db, boolean ifNotExists) {
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "\"POS\" (" + //
//                "\"F_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
//                "\"F_POS_SN\" TEXT NOT NULL ," + // 1: pos_SN
//                "\"F_ShopID\" INTEGER NOT NULL ," + // 2: shopID
//                "\"F_PwdEncrypted\" TEXT," + // 3: pwdEncrypted
//                "\"F_Salt\" TEXT," + // 4: salt
//                "\"F_PasswordInPOS\" TEXT," + // 5: passwordInPOS
//                "\"F_SyncDatetime\" INTEGER," + // 6: syncDatetime
//                "\"F_SyncType\" TEXT," + // 7: syncType
//                "\"F_Status\" INTEGER NOT NULL );"); // 8: status
//    }
//
//    /** Drops the underlying database table. */
//    public static void dropTable(Database db, boolean ifExists) {
//        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POS\"";
//        db.execSQL(sql);
//    }
//
//    @Override
//    protected final void bindValues(DatabaseStatement stmt, Pos entity) {
//        stmt.clearBindings();
//
//        Long ID = entity.getID();
//        if (ID != null) {
//            stmt.bindLong(1, ID);
//        }
//        stmt.bindString(2, entity.getPos_SN());
//        stmt.bindLong(3, entity.getShopID());
//
//        String pwdEncrypted = entity.getPwdEncrypted();
//        if (pwdEncrypted != null) {
//            stmt.bindString(4, pwdEncrypted);
//        }
//
//        String salt = entity.getSalt();
//        if (salt != null) {
//            stmt.bindString(5, salt);
//        }
//
//        String passwordInPOS = entity.getPasswordInPOS();
//        if (passwordInPOS != null) {
//            stmt.bindString(6, passwordInPOS);
//        }
//
//        java.util.Date syncDatetime = entity.getSyncDatetime();
//        if (syncDatetime != null) {
//            stmt.bindLong(7, syncDatetime.getTime());
//        }
//
//        String syncType = entity.getSyncType();
//        if (syncType != null) {
//            stmt.bindString(8, syncType);
//        }
//        stmt.bindLong(9, entity.getStatus());
//    }
//
//    @Override
//    protected final void bindValues(SQLiteStatement stmt, Pos entity) {
//        stmt.clearBindings();
//
//        Long ID = entity.getID();
//        if (ID != null) {
//            stmt.bindLong(1, ID);
//        }
//        stmt.bindString(2, entity.getPos_SN());
//        stmt.bindLong(3, entity.getShopID());
//
//        String pwdEncrypted = entity.getPwdEncrypted();
//        if (pwdEncrypted != null) {
//            stmt.bindString(4, pwdEncrypted);
//        }
//
//        String salt = entity.getSalt();
//        if (salt != null) {
//            stmt.bindString(5, salt);
//        }
//
//        String passwordInPOS = entity.getPasswordInPOS();
//        if (passwordInPOS != null) {
//            stmt.bindString(6, passwordInPOS);
//        }
//
//        java.util.Date syncDatetime = entity.getSyncDatetime();
//        if (syncDatetime != null) {
//            stmt.bindLong(7, syncDatetime.getTime());
//        }
//
//        String syncType = entity.getSyncType();
//        if (syncType != null) {
//            stmt.bindString(8, syncType);
//        }
//        stmt.bindLong(9, entity.getStatus());
//    }
//
//    @Override
//    public Long readKey(Cursor cursor, int offset) {
//        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
//    }
//
//    @Override
//    public Pos readEntity(Cursor cursor, int offset) {
//        Pos entity = new Pos( //
//            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
//            cursor.getString(offset + 1), // pos_SN
//            cursor.getLong(offset + 2), // shopID
//            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pwdEncrypted
//            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // salt
//            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // passwordInPOS
//            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // syncDatetime
//            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // syncType
//            cursor.getInt(offset + 8) // status
//        );
//        return entity;
//    }
//
//    @Override
//    public void readEntity(Cursor cursor, Pos entity, int offset) {
//        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
//        entity.setPos_SN(cursor.getString(offset + 1));
//        entity.setShopID(cursor.getLong(offset + 2));
//        entity.setPwdEncrypted(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
//        entity.setSalt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
//        entity.setPasswordInPOS(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
//        entity.setSyncDatetime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
//        entity.setSyncType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
//        entity.setStatus(cursor.getInt(offset + 8));
//     }
//
//    @Override
//    protected final Long updateKeyAfterInsert(Pos entity, long rowId) {
//        entity.setID(rowId);
//        return rowId;
//    }
//
//    @Override
//    public Long getKey(Pos entity) {
//        if(entity != null) {
//            return entity.getID();
//        } else {
//            return null;
//        }
//    }
//
//    @Override
//    public boolean hasKey(Pos entity) {
//        return entity.getID() != null;
//    }
//
//    @Override
//    protected final boolean isEntityUpdateable() {
//        return true;
//    }
//
//}
