//package wpos.model;
//
//import android.database.Cursor;
//import android.database.sqlite.SQLiteStatement;
//
//import org.greenrobot.greendao.AbstractDao;
//import org.greenrobot.greendao.Property;
//import org.greenrobot.greendao.internal.DaoConfig;
//import org.greenrobot.greendao.database.Database;
//import org.greenrobot.greendao.database.DatabaseStatement;
//
//// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
///**
// * DAO for table "RetailTradePromotingFlow".
//*/
//public class RetailTradePromotingFlowDao extends AbstractDao<RetailTradePromotingFlow, Long> {
//
//    public static final String TABLENAME = "RetailTradePromotingFlow";
//
//    /**
//     * Properties of entity RetailTradePromotingFlow.<br/>
//     * Can be used for QueryBuilder and for referencing column names.
//     */
//    public static class Properties {
//        public final static Property ID = new Property(0, Long.class, "ID", true, "F_ID");
//        public final static Property RetailTradePromotingID = new Property(1, int.class, "retailTradePromotingID", false, "F_RetailTradePromotingID");
//        public final static Property PromotionID = new Property(2, int.class, "promotionID", false, "F_PromotionID");
//        public final static Property ProcessFlow = new Property(3, String.class, "processFlow", false, "F_ProcessFlow");
//        public final static Property CreateDatetime = new Property(4, java.util.Date.class, "createDatetime", false, "F_CreateDatetime");
//        public final static Property SyncDatetime = new Property(5, java.util.Date.class, "syncDatetime", false, "F_SyncDatetime");
//        public final static Property SyncType = new Property(6, String.class, "syncType", false, "F_SyncType");
//    }
//
//
//    public RetailTradePromotingFlowDao(DaoConfig config) {
//        super(config);
//    }
//
//    public RetailTradePromotingFlowDao(DaoConfig config, DaoSession daoSession) {
//        super(config, daoSession);
//    }
//
//    /** Creates the underlying database table. */
//    public static void createTable(Database db, boolean ifNotExists) {
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "\"RetailTradePromotingFlow\" (" + //
//                "\"F_ID\" INTEGER PRIMARY KEY ," + // 0: ID
//                "\"F_RetailTradePromotingID\" INTEGER NOT NULL ," + // 1: retailTradePromotingID
//                "\"F_PromotionID\" INTEGER NOT NULL ," + // 2: promotionID
//                "\"F_ProcessFlow\" TEXT," + // 3: processFlow
//                "\"F_CreateDatetime\" INTEGER," + // 4: createDatetime
//                "\"F_SyncDatetime\" INTEGER," + // 5: syncDatetime
//                "\"F_SyncType\" TEXT);"); // 6: syncType
//    }
//
//    /** Drops the underlying database table. */
//    public static void dropTable(Database db, boolean ifExists) {
//        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RetailTradePromotingFlow\"";
//        db.execSQL(sql);
//    }
//
//    @Override
//    protected final void bindValues(DatabaseStatement stmt, RetailTradePromotingFlow entity) {
//        stmt.clearBindings();
//
//        Long ID = entity.getID();
//        if (ID != null) {
//            stmt.bindLong(1, ID);
//        }
//        stmt.bindLong(2, entity.getRetailTradePromotingID());
//        stmt.bindLong(3, entity.getPromotionID());
//
//        String processFlow = entity.getProcessFlow();
//        if (processFlow != null) {
//            stmt.bindString(4, processFlow);
//        }
//
//        java.util.Date createDatetime = entity.getCreateDatetime();
//        if (createDatetime != null) {
//            stmt.bindLong(5, createDatetime.getTime());
//        }
//
//        java.util.Date syncDatetime = entity.getSyncDatetime();
//        if (syncDatetime != null) {
//            stmt.bindLong(6, syncDatetime.getTime());
//        }
//
//        String syncType = entity.getSyncType();
//        if (syncType != null) {
//            stmt.bindString(7, syncType);
//        }
//    }
//
//    @Override
//    protected final void bindValues(SQLiteStatement stmt, RetailTradePromotingFlow entity) {
//        stmt.clearBindings();
//
//        Long ID = entity.getID();
//        if (ID != null) {
//            stmt.bindLong(1, ID);
//        }
//        stmt.bindLong(2, entity.getRetailTradePromotingID());
//        stmt.bindLong(3, entity.getPromotionID());
//
//        String processFlow = entity.getProcessFlow();
//        if (processFlow != null) {
//            stmt.bindString(4, processFlow);
//        }
//
//        java.util.Date createDatetime = entity.getCreateDatetime();
//        if (createDatetime != null) {
//            stmt.bindLong(5, createDatetime.getTime());
//        }
//
//        java.util.Date syncDatetime = entity.getSyncDatetime();
//        if (syncDatetime != null) {
//            stmt.bindLong(6, syncDatetime.getTime());
//        }
//
//        String syncType = entity.getSyncType();
//        if (syncType != null) {
//            stmt.bindString(7, syncType);
//        }
//    }
//
//    @Override
//    public Long readKey(Cursor cursor, int offset) {
//        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
//    }
//
//    @Override
//    public RetailTradePromotingFlow readEntity(Cursor cursor, int offset) {
//        RetailTradePromotingFlow entity = new RetailTradePromotingFlow( //
//            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
//            cursor.getInt(offset + 1), // retailTradePromotingID
//            cursor.getInt(offset + 2), // promotionID
//            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // processFlow
//            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createDatetime
//            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // syncDatetime
//            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // syncType
//        );
//        return entity;
//    }
//
//    @Override
//    public void readEntity(Cursor cursor, RetailTradePromotingFlow entity, int offset) {
//        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
//        entity.setRetailTradePromotingID(cursor.getInt(offset + 1));
//        entity.setPromotionID(cursor.getInt(offset + 2));
//        entity.setProcessFlow(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
//        entity.setCreateDatetime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
//        entity.setSyncDatetime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
//        entity.setSyncType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
//     }
//
//    @Override
//    protected final Long updateKeyAfterInsert(RetailTradePromotingFlow entity, long rowId) {
//        entity.setID(rowId);
//        return rowId;
//    }
//
//    @Override
//    public Long getKey(RetailTradePromotingFlow entity) {
//        if(entity != null) {
//            return entity.getID();
//        } else {
//            return null;
//        }
//    }
//
//    @Override
//    public boolean hasKey(RetailTradePromotingFlow entity) {
//        return entity.getID() != null;
//    }
//
//    @Override
//    protected final boolean isEntityUpdateable() {
//        return true;
//    }
//
//}
